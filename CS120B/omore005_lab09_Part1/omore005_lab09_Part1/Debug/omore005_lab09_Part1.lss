
omore005_lab09_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000782  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000070e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000782  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000782  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000918  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000814  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047b  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a8 30       	cpi	r26, 0x08	; 8
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	9d d1       	rcall	.+826    	; 0x3e4 <main>
  aa:	2f c3       	rjmp	.+1630   	; 0x70a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <set_PWM>:
#include <avr/io.h>

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	00 d0       	rcall	.+0      	; 0xb8 <set_PWM+0xa>
  b8:	00 d0       	rcall	.+0      	; 0xba <set_PWM+0xc>
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	69 83       	std	Y+1, r22	; 0x01
  c0:	7a 83       	std	Y+2, r23	; 0x02
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	9c 83       	std	Y+4, r25	; 0x04
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
  c6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <current_frequency.1604>
  ca:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <current_frequency.1604+0x1>
  ce:	a0 91 05 01 	lds	r26, 0x0105	; 0x800105 <current_frequency.1604+0x2>
  d2:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <current_frequency.1604+0x3>
  d6:	9c 01       	movw	r18, r24
  d8:	ad 01       	movw	r20, r26
  da:	69 81       	ldd	r22, Y+1	; 0x01
  dc:	7a 81       	ldd	r23, Y+2	; 0x02
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	9c 81       	ldd	r25, Y+4	; 0x04
  e2:	9a d1       	rcall	.+820    	; 0x418 <__cmpsf2>
  e4:	88 23       	and	r24, r24
  e6:	09 f4       	brne	.+2      	; 0xea <set_PWM+0x3c>
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }

		TCNT3 = 0; // resets counter
		current_frequency = frequency; // Updates the current frequency
	}
}
  e8:	71 c0       	rjmp	.+226    	; 0x1cc <set_PWM+0x11e>
void set_PWM(double frequency) {
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	a9 01       	movw	r20, r18
  f0:	69 81       	ldd	r22, Y+1	; 0x01
  f2:	7a 81       	ldd	r23, Y+2	; 0x02
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	9c 81       	ldd	r25, Y+4	; 0x04
  f8:	8f d1       	rcall	.+798    	; 0x418 <__cmpsf2>
  fa:	88 23       	and	r24, r24
  fc:	51 f4       	brne	.+20     	; 0x112 <set_PWM+0x64>
  fe:	81 e9       	ldi	r24, 0x91	; 145
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	21 e9       	ldi	r18, 0x91	; 145
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	28 70       	andi	r18, 0x08	; 8
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
 110:	09 c0       	rjmp	.+18     	; 0x124 <set_PWM+0x76>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 112:	81 e9       	ldi	r24, 0x91	; 145
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	21 e9       	ldi	r18, 0x91	; 145
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	23 60       	ori	r18, 0x03	; 3
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 124:	28 e5       	ldi	r18, 0x58	; 88
 126:	39 e3       	ldi	r19, 0x39	; 57
 128:	44 e7       	ldi	r20, 0x74	; 116
 12a:	5f e3       	ldi	r21, 0x3F	; 63
 12c:	69 81       	ldd	r22, Y+1	; 0x01
 12e:	7a 81       	ldd	r23, Y+2	; 0x02
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	9c 81       	ldd	r25, Y+4	; 0x04
 134:	71 d1       	rcall	.+738    	; 0x418 <__cmpsf2>
 136:	88 23       	and	r24, r24
 138:	44 f4       	brge	.+16     	; 0x14a <set_PWM+0x9c>
 13a:	88 e9       	ldi	r24, 0x98	; 152
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	3f ef       	ldi	r19, 0xFF	; 255
 142:	fc 01       	movw	r30, r24
 144:	31 83       	std	Z+1, r19	; 0x01
 146:	20 83       	st	Z, r18
 148:	30 c0       	rjmp	.+96     	; 0x1aa <set_PWM+0xfc>
		
		// prevents OCR0A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	34 e2       	ldi	r19, 0x24	; 36
 14e:	44 ef       	ldi	r20, 0xF4	; 244
 150:	56 e4       	ldi	r21, 0x46	; 70
 152:	69 81       	ldd	r22, Y+1	; 0x01
 154:	7a 81       	ldd	r23, Y+2	; 0x02
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	9c 81       	ldd	r25, Y+4	; 0x04
 15a:	70 d2       	rcall	.+1248   	; 0x63c <__gesf2>
 15c:	18 16       	cp	r1, r24
 15e:	34 f4       	brge	.+12     	; 0x16c <set_PWM+0xbe>
 160:	88 e9       	ldi	r24, 0x98	; 152
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	11 82       	std	Z+1, r1	; 0x01
 168:	10 82       	st	Z, r1
 16a:	1f c0       	rjmp	.+62     	; 0x1aa <set_PWM+0xfc>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 16c:	08 e9       	ldi	r16, 0x98	; 152
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	53 e4       	ldi	r21, 0x43	; 67
 178:	69 81       	ldd	r22, Y+1	; 0x01
 17a:	7a 81       	ldd	r23, Y+2	; 0x02
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	9c 81       	ldd	r25, Y+4	; 0x04
 180:	61 d2       	rcall	.+1218   	; 0x644 <__mulsf3>
 182:	dc 01       	movw	r26, r24
 184:	cb 01       	movw	r24, r22
 186:	9c 01       	movw	r18, r24
 188:	ad 01       	movw	r20, r26
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	74 e2       	ldi	r23, 0x24	; 36
 18e:	84 ef       	ldi	r24, 0xF4	; 244
 190:	9a e4       	ldi	r25, 0x4A	; 74
 192:	46 d1       	rcall	.+652    	; 0x420 <__divsf3>
 194:	dc 01       	movw	r26, r24
 196:	cb 01       	movw	r24, r22
 198:	bc 01       	movw	r22, r24
 19a:	cd 01       	movw	r24, r26
 19c:	a9 d1       	rcall	.+850    	; 0x4f0 <__fixsfsi>
 19e:	dc 01       	movw	r26, r24
 1a0:	cb 01       	movw	r24, r22
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f8 01       	movw	r30, r16
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24

		TCNT3 = 0; // resets counter
 1aa:	84 e9       	ldi	r24, 0x94	; 148
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	11 82       	std	Z+1, r1	; 0x01
 1b2:	10 82       	st	Z, r1
		current_frequency = frequency; // Updates the current frequency
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
 1b8:	ab 81       	ldd	r26, Y+3	; 0x03
 1ba:	bc 81       	ldd	r27, Y+4	; 0x04
 1bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <current_frequency.1604>
 1c0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <current_frequency.1604+0x1>
 1c4:	a0 93 05 01 	sts	0x0105, r26	; 0x800105 <current_frequency.1604+0x2>
 1c8:	b0 93 06 01 	sts	0x0106, r27	; 0x800106 <current_frequency.1604+0x3>
	}
}
 1cc:	00 00       	nop
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <PWM_on>:

void PWM_on() {
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
	TCCR3A = (1 << COM3A0);
 1e8:	80 e9       	ldi	r24, 0x90	; 144
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	20 e4       	ldi	r18, 0x40	; 64
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 1f2:	81 e9       	ldi	r24, 0x91	; 145
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2b e0       	ldi	r18, 0x0B	; 11
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	cb 01       	movw	r24, r22
 202:	55 df       	rcall	.-342    	; 0xae <set_PWM>
}
 204:	00 00       	nop
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <PWM_off>:

void PWM_off() {
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	TCCR3B = 0x00;
 214:	81 e9       	ldi	r24, 0x91	; 145
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	10 82       	st	Z, r1
	TCCR3B = 0x00;
 21c:	81 e9       	ldi	r24, 0x91	; 145
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	fc 01       	movw	r30, r24
 222:	10 82       	st	Z, r1
}
 224:	00 00       	nop
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <tick>:
unsigned char C4Button = 0;
unsigned char D4Button = 0;
unsigned char E4Button = 0;

void tick()
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
	C4Button = (~PINA) & 0x01;
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	88 2f       	mov	r24, r24
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	81 70       	andi	r24, 0x01	; 1
 242:	99 27       	eor	r25, r25
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	89 2b       	or	r24, r25
 248:	09 f0       	breq	.+2      	; 0x24c <tick+0x20>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	82 2f       	mov	r24, r18
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	D4Button = (~PINA) & 0x02;
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	80 81       	ld	r24, Z
 25a:	80 95       	com	r24
 25c:	82 70       	andi	r24, 0x02	; 2
 25e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <D4Button>
	E4Button = (~PINA) & 0x04;
 262:	80 e2       	ldi	r24, 0x20	; 32
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	80 81       	ld	r24, Z
 26a:	80 95       	com	r24
 26c:	84 70       	andi	r24, 0x04	; 4
 26e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <E4Button>
	
	switch(state) //Transitions
 272:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state>
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	91 05       	cpc	r25, r1
 27e:	09 f4       	brne	.+2      	; 0x282 <tick+0x56>
 280:	5b c0       	rjmp	.+182    	; 0x338 <tick+0x10c>
 282:	83 30       	cpi	r24, 0x03	; 3
 284:	91 05       	cpc	r25, r1
 286:	2c f4       	brge	.+10     	; 0x292 <tick+0x66>
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	59 f0       	breq	.+22     	; 0x2a2 <tick+0x76>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	69 f0       	breq	.+26     	; 0x2aa <tick+0x7e>
 290:	8f c0       	rjmp	.+286    	; 0x3b0 <tick+0x184>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	91 05       	cpc	r25, r1
 296:	09 f4       	brne	.+2      	; 0x29a <tick+0x6e>
 298:	63 c0       	rjmp	.+198    	; 0x360 <tick+0x134>
 29a:	04 97       	sbiw	r24, 0x04	; 4
 29c:	09 f4       	brne	.+2      	; 0x2a0 <tick+0x74>
 29e:	74 c0       	rjmp	.+232    	; 0x388 <tick+0x15c>
 2a0:	87 c0       	rjmp	.+270    	; 0x3b0 <tick+0x184>
	{
		case INIT: state = WAIT;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
 2a8:	83 c0       	rjmp	.+262    	; 0x3b0 <tick+0x184>
		
		case WAIT:
		
		if (C4Button && !D4Button && !E4Button) {
 2aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ae:	88 23       	and	r24, r24
 2b0:	91 f0       	breq	.+36     	; 0x2d6 <tick+0xaa>
 2b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <D4Button>
 2b6:	88 23       	and	r24, r24
 2b8:	71 f4       	brne	.+28     	; 0x2d6 <tick+0xaa>
 2ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <E4Button>
 2be:	88 23       	and	r24, r24
 2c0:	51 f4       	brne	.+20     	; 0x2d6 <tick+0xaa>
			state = C4;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			PWM_on();
 2c8:	8b df       	rcall	.-234    	; 0x1e0 <PWM_on>
			set_PWM(261.63);
 2ca:	64 ea       	ldi	r22, 0xA4	; 164
 2cc:	70 ed       	ldi	r23, 0xD0	; 208
 2ce:	82 e8       	ldi	r24, 0x82	; 130
 2d0:	93 e4       	ldi	r25, 0x43	; 67
 2d2:	ed de       	rcall	.-550    	; 0xae <set_PWM>
 2d4:	30 c0       	rjmp	.+96     	; 0x336 <tick+0x10a>
			} else if (D4Button &&!C4Button && !E4Button ) {
 2d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <D4Button>
 2da:	88 23       	and	r24, r24
 2dc:	91 f0       	breq	.+36     	; 0x302 <tick+0xd6>
 2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e2:	88 23       	and	r24, r24
 2e4:	71 f4       	brne	.+28     	; 0x302 <tick+0xd6>
 2e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <E4Button>
 2ea:	88 23       	and	r24, r24
 2ec:	51 f4       	brne	.+20     	; 0x302 <tick+0xd6>
			state = D4;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			PWM_on();
 2f4:	75 df       	rcall	.-278    	; 0x1e0 <PWM_on>
			set_PWM(293.66);
 2f6:	6b e7       	ldi	r22, 0x7B	; 123
 2f8:	74 ed       	ldi	r23, 0xD4	; 212
 2fa:	82 e9       	ldi	r24, 0x92	; 146
 2fc:	93 e4       	ldi	r25, 0x43	; 67
 2fe:	d7 de       	rcall	.-594    	; 0xae <set_PWM>
 300:	1a c0       	rjmp	.+52     	; 0x336 <tick+0x10a>
			} else if (E4Button && !C4Button && !D4Button ) {
 302:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <E4Button>
 306:	88 23       	and	r24, r24
 308:	91 f0       	breq	.+36     	; 0x32e <tick+0x102>
 30a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 30e:	88 23       	and	r24, r24
 310:	71 f4       	brne	.+28     	; 0x32e <tick+0x102>
 312:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <D4Button>
 316:	88 23       	and	r24, r24
			state = E4;
 318:	51 f4       	brne	.+20     	; 0x32e <tick+0x102>
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			PWM_on();
			set_PWM(329.63);
 320:	5f df       	rcall	.-322    	; 0x1e0 <PWM_on>
 322:	64 ea       	ldi	r22, 0xA4	; 164
 324:	70 ed       	ldi	r23, 0xD0	; 208
 326:	84 ea       	ldi	r24, 0xA4	; 164
 328:	93 e4       	ldi	r25, 0x43	; 67
 32a:	c1 de       	rcall	.-638    	; 0xae <set_PWM>
 32c:	04 c0       	rjmp	.+8      	; 0x336 <tick+0x10a>
		}
		else 
		{			
			state = WAIT;
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		}
		
		break;
 334:	3d c0       	rjmp	.+122    	; 0x3b0 <tick+0x184>
 336:	3c c0       	rjmp	.+120    	; 0x3b0 <tick+0x184>
		
		case C4:
		if (C4Button && !D4Button && !E4Button) {
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 33c:	88 23       	and	r24, r24
 33e:	61 f0       	breq	.+24     	; 0x358 <tick+0x12c>
 340:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <D4Button>
 344:	88 23       	and	r24, r24
 346:	41 f4       	brne	.+16     	; 0x358 <tick+0x12c>
 348:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <E4Button>
 34c:	88 23       	and	r24, r24
 34e:	21 f4       	brne	.+8      	; 0x358 <tick+0x12c>
			state = C4;
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		} 
		else
		{
			state = WAIT;
		}
		break;
 356:	2c c0       	rjmp	.+88     	; 0x3b0 <tick+0x184>
		if (C4Button && !D4Button && !E4Button) {
			state = C4;
		} 
		else
		{
			state = WAIT;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		}
		break;
 35e:	28 c0       	rjmp	.+80     	; 0x3b0 <tick+0x184>
		
		case D4:
		if (D4Button &&!C4Button && !E4Button) {
 360:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <D4Button>
 364:	88 23       	and	r24, r24
 366:	61 f0       	breq	.+24     	; 0x380 <tick+0x154>
 368:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 36c:	88 23       	and	r24, r24
 36e:	41 f4       	brne	.+16     	; 0x380 <tick+0x154>
 370:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <E4Button>
 374:	88 23       	and	r24, r24
 376:	21 f4       	brne	.+8      	; 0x380 <tick+0x154>
			state = D4;
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			} else {
			state = WAIT;
		}
		break;
 37e:	18 c0       	rjmp	.+48     	; 0x3b0 <tick+0x184>
		
		case D4:
		if (D4Button &&!C4Button && !E4Button) {
			state = D4;
			} else {
			state = WAIT;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		}
		break;
 386:	14 c0       	rjmp	.+40     	; 0x3b0 <tick+0x184>
		
		case E4:
		if (E4Button && !C4Button && !D4Button) {
 388:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <E4Button>
 38c:	88 23       	and	r24, r24
 38e:	61 f0       	breq	.+24     	; 0x3a8 <tick+0x17c>
 390:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 394:	88 23       	and	r24, r24
 396:	41 f4       	brne	.+16     	; 0x3a8 <tick+0x17c>
 398:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <D4Button>
 39c:	88 23       	and	r24, r24
 39e:	21 f4       	brne	.+8      	; 0x3a8 <tick+0x17c>
			state = E4;
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			} else {
			state = WAIT;
		}
		break;
 3a6:	03 c0       	rjmp	.+6      	; 0x3ae <tick+0x182>
		
		case E4:
		if (E4Button && !C4Button && !D4Button) {
			state = E4;
			} else {
			state = WAIT;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		}
		break;
 3ae:	00 00       	nop
		
	}
	switch(state) //Actions
 3b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state>
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	91 05       	cpc	r25, r1
 3bc:	51 f0       	breq	.+20     	; 0x3d2 <tick+0x1a6>
 3be:	83 30       	cpi	r24, 0x03	; 3
 3c0:	91 05       	cpc	r25, r1
 3c2:	4c f4       	brge	.+18     	; 0x3d6 <tick+0x1aa>
 3c4:	00 97       	sbiw	r24, 0x00	; 0
 3c6:	49 f0       	breq	.+18     	; 0x3da <tick+0x1ae>
 3c8:	01 97       	sbiw	r24, 0x01	; 1
		
		case E4:
		break;
		
	}//end of actions switch
}//end of tick function
 3ca:	09 f0       	breq	.+2      	; 0x3ce <tick+0x1a2>
	{
		case INIT:
		break;
		
		case WAIT:
			PWM_off();
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <tick+0x1b0>
 3ce:	1e df       	rcall	.-452    	; 0x20c <PWM_off>
		break;
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <tick+0x1b0>
		
		case C4:
		break;
 3d2:	00 00       	nop
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <tick+0x1b0>
		
		case D4:
		break;
 3d6:	00 00       	nop
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <tick+0x1b0>
		
	}
	switch(state) //Actions
	{
		case INIT:
		break;
 3da:	00 00       	nop
		
		case E4:
		break;
		
	}//end of actions switch
}//end of tick function
 3dc:	00 00       	nop
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <main>:


int main(void)
{
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA  = 0xFF; //set for input 0-3 for button
 3ec:	81 e2       	ldi	r24, 0x21	; 33
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	10 82       	st	Z, r1
 3f4:	82 e2       	ldi	r24, 0x22	; 34
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	2f ef       	ldi	r18, 0xFF	; 255
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //set for output 0 for speaker
 3fe:	84 e2       	ldi	r24, 0x24	; 36
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	2f ef       	ldi	r18, 0xFF	; 255
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
 408:	85 e2       	ldi	r24, 0x25	; 37
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	fc 01       	movw	r30, r24
 40e:	10 82       	st	Z, r1
	state = INIT;
 410:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
    while (1) 
    {
		tick();
 414:	0b df       	rcall	.-490    	; 0x22c <tick>
		
    }
 416:	fe cf       	rjmp	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

00000418 <__cmpsf2>:
 418:	9c d0       	rcall	.+312    	; 0x552 <__fp_cmp>
 41a:	08 f4       	brcc	.+2      	; 0x41e <__cmpsf2+0x6>
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	08 95       	ret

00000420 <__divsf3>:
 420:	0c d0       	rcall	.+24     	; 0x43a <__divsf3x>
 422:	d2 c0       	rjmp	.+420    	; 0x5c8 <__fp_round>
 424:	ca d0       	rcall	.+404    	; 0x5ba <__fp_pscB>
 426:	40 f0       	brcs	.+16     	; 0x438 <__divsf3+0x18>
 428:	c1 d0       	rcall	.+386    	; 0x5ac <__fp_pscA>
 42a:	30 f0       	brcs	.+12     	; 0x438 <__divsf3+0x18>
 42c:	21 f4       	brne	.+8      	; 0x436 <__divsf3+0x16>
 42e:	5f 3f       	cpi	r21, 0xFF	; 255
 430:	19 f0       	breq	.+6      	; 0x438 <__divsf3+0x18>
 432:	b3 c0       	rjmp	.+358    	; 0x59a <__fp_inf>
 434:	51 11       	cpse	r21, r1
 436:	fc c0       	rjmp	.+504    	; 0x630 <__fp_szero>
 438:	b6 c0       	rjmp	.+364    	; 0x5a6 <__fp_nan>

0000043a <__divsf3x>:
 43a:	d7 d0       	rcall	.+430    	; 0x5ea <__fp_split3>
 43c:	98 f3       	brcs	.-26     	; 0x424 <__divsf3+0x4>

0000043e <__divsf3_pse>:
 43e:	99 23       	and	r25, r25
 440:	c9 f3       	breq	.-14     	; 0x434 <__divsf3+0x14>
 442:	55 23       	and	r21, r21
 444:	b1 f3       	breq	.-20     	; 0x432 <__divsf3+0x12>
 446:	95 1b       	sub	r25, r21
 448:	55 0b       	sbc	r21, r21
 44a:	bb 27       	eor	r27, r27
 44c:	aa 27       	eor	r26, r26
 44e:	62 17       	cp	r22, r18
 450:	73 07       	cpc	r23, r19
 452:	84 07       	cpc	r24, r20
 454:	38 f0       	brcs	.+14     	; 0x464 <__divsf3_pse+0x26>
 456:	9f 5f       	subi	r25, 0xFF	; 255
 458:	5f 4f       	sbci	r21, 0xFF	; 255
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	44 1f       	adc	r20, r20
 460:	aa 1f       	adc	r26, r26
 462:	a9 f3       	breq	.-22     	; 0x44e <__divsf3_pse+0x10>
 464:	33 d0       	rcall	.+102    	; 0x4cc <__divsf3_pse+0x8e>
 466:	0e 2e       	mov	r0, r30
 468:	3a f0       	brmi	.+14     	; 0x478 <__divsf3_pse+0x3a>
 46a:	e0 e8       	ldi	r30, 0x80	; 128
 46c:	30 d0       	rcall	.+96     	; 0x4ce <__divsf3_pse+0x90>
 46e:	91 50       	subi	r25, 0x01	; 1
 470:	50 40       	sbci	r21, 0x00	; 0
 472:	e6 95       	lsr	r30
 474:	00 1c       	adc	r0, r0
 476:	ca f7       	brpl	.-14     	; 0x46a <__divsf3_pse+0x2c>
 478:	29 d0       	rcall	.+82     	; 0x4cc <__divsf3_pse+0x8e>
 47a:	fe 2f       	mov	r31, r30
 47c:	27 d0       	rcall	.+78     	; 0x4cc <__divsf3_pse+0x8e>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	bb 1f       	adc	r27, r27
 486:	26 17       	cp	r18, r22
 488:	37 07       	cpc	r19, r23
 48a:	48 07       	cpc	r20, r24
 48c:	ab 07       	cpc	r26, r27
 48e:	b0 e8       	ldi	r27, 0x80	; 128
 490:	09 f0       	breq	.+2      	; 0x494 <__divsf3_pse+0x56>
 492:	bb 0b       	sbc	r27, r27
 494:	80 2d       	mov	r24, r0
 496:	bf 01       	movw	r22, r30
 498:	ff 27       	eor	r31, r31
 49a:	93 58       	subi	r25, 0x83	; 131
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	2a f0       	brmi	.+10     	; 0x4aa <__divsf3_pse+0x6c>
 4a0:	9e 3f       	cpi	r25, 0xFE	; 254
 4a2:	51 05       	cpc	r21, r1
 4a4:	68 f0       	brcs	.+26     	; 0x4c0 <__divsf3_pse+0x82>
 4a6:	79 c0       	rjmp	.+242    	; 0x59a <__fp_inf>
 4a8:	c3 c0       	rjmp	.+390    	; 0x630 <__fp_szero>
 4aa:	5f 3f       	cpi	r21, 0xFF	; 255
 4ac:	ec f3       	brlt	.-6      	; 0x4a8 <__divsf3_pse+0x6a>
 4ae:	98 3e       	cpi	r25, 0xE8	; 232
 4b0:	dc f3       	brlt	.-10     	; 0x4a8 <__divsf3_pse+0x6a>
 4b2:	86 95       	lsr	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b7 95       	ror	r27
 4ba:	f7 95       	ror	r31
 4bc:	9f 5f       	subi	r25, 0xFF	; 255
 4be:	c9 f7       	brne	.-14     	; 0x4b2 <__divsf3_pse+0x74>
 4c0:	88 0f       	add	r24, r24
 4c2:	91 1d       	adc	r25, r1
 4c4:	96 95       	lsr	r25
 4c6:	87 95       	ror	r24
 4c8:	97 f9       	bld	r25, 7
 4ca:	08 95       	ret
 4cc:	e1 e0       	ldi	r30, 0x01	; 1
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	bb 1f       	adc	r27, r27
 4d6:	62 17       	cp	r22, r18
 4d8:	73 07       	cpc	r23, r19
 4da:	84 07       	cpc	r24, r20
 4dc:	ba 07       	cpc	r27, r26
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__divsf3_pse+0xaa>
 4e0:	62 1b       	sub	r22, r18
 4e2:	73 0b       	sbc	r23, r19
 4e4:	84 0b       	sbc	r24, r20
 4e6:	ba 0b       	sbc	r27, r26
 4e8:	ee 1f       	adc	r30, r30
 4ea:	88 f7       	brcc	.-30     	; 0x4ce <__divsf3_pse+0x90>
 4ec:	e0 95       	com	r30
 4ee:	08 95       	ret

000004f0 <__fixsfsi>:
 4f0:	04 d0       	rcall	.+8      	; 0x4fa <__fixunssfsi>
 4f2:	68 94       	set
 4f4:	b1 11       	cpse	r27, r1
 4f6:	9c c0       	rjmp	.+312    	; 0x630 <__fp_szero>
 4f8:	08 95       	ret

000004fa <__fixunssfsi>:
 4fa:	7f d0       	rcall	.+254    	; 0x5fa <__fp_splitA>
 4fc:	88 f0       	brcs	.+34     	; 0x520 <__fixunssfsi+0x26>
 4fe:	9f 57       	subi	r25, 0x7F	; 127
 500:	90 f0       	brcs	.+36     	; 0x526 <__fixunssfsi+0x2c>
 502:	b9 2f       	mov	r27, r25
 504:	99 27       	eor	r25, r25
 506:	b7 51       	subi	r27, 0x17	; 23
 508:	a0 f0       	brcs	.+40     	; 0x532 <__fixunssfsi+0x38>
 50a:	d1 f0       	breq	.+52     	; 0x540 <__fixunssfsi+0x46>
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	88 1f       	adc	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	1a f0       	brmi	.+6      	; 0x51c <__fixunssfsi+0x22>
 516:	ba 95       	dec	r27
 518:	c9 f7       	brne	.-14     	; 0x50c <__fixunssfsi+0x12>
 51a:	12 c0       	rjmp	.+36     	; 0x540 <__fixunssfsi+0x46>
 51c:	b1 30       	cpi	r27, 0x01	; 1
 51e:	81 f0       	breq	.+32     	; 0x540 <__fixunssfsi+0x46>
 520:	86 d0       	rcall	.+268    	; 0x62e <__fp_zero>
 522:	b1 e0       	ldi	r27, 0x01	; 1
 524:	08 95       	ret
 526:	83 c0       	rjmp	.+262    	; 0x62e <__fp_zero>
 528:	67 2f       	mov	r22, r23
 52a:	78 2f       	mov	r23, r24
 52c:	88 27       	eor	r24, r24
 52e:	b8 5f       	subi	r27, 0xF8	; 248
 530:	39 f0       	breq	.+14     	; 0x540 <__fixunssfsi+0x46>
 532:	b9 3f       	cpi	r27, 0xF9	; 249
 534:	cc f3       	brlt	.-14     	; 0x528 <__fixunssfsi+0x2e>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b3 95       	inc	r27
 53e:	d9 f7       	brne	.-10     	; 0x536 <__fixunssfsi+0x3c>
 540:	3e f4       	brtc	.+14     	; 0x550 <__fixunssfsi+0x56>
 542:	90 95       	com	r25
 544:	80 95       	com	r24
 546:	70 95       	com	r23
 548:	61 95       	neg	r22
 54a:	7f 4f       	sbci	r23, 0xFF	; 255
 54c:	8f 4f       	sbci	r24, 0xFF	; 255
 54e:	9f 4f       	sbci	r25, 0xFF	; 255
 550:	08 95       	ret

00000552 <__fp_cmp>:
 552:	99 0f       	add	r25, r25
 554:	00 08       	sbc	r0, r0
 556:	55 0f       	add	r21, r21
 558:	aa 0b       	sbc	r26, r26
 55a:	e0 e8       	ldi	r30, 0x80	; 128
 55c:	fe ef       	ldi	r31, 0xFE	; 254
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	e8 07       	cpc	r30, r24
 564:	f9 07       	cpc	r31, r25
 566:	c0 f0       	brcs	.+48     	; 0x598 <__fp_cmp+0x46>
 568:	12 16       	cp	r1, r18
 56a:	13 06       	cpc	r1, r19
 56c:	e4 07       	cpc	r30, r20
 56e:	f5 07       	cpc	r31, r21
 570:	98 f0       	brcs	.+38     	; 0x598 <__fp_cmp+0x46>
 572:	62 1b       	sub	r22, r18
 574:	73 0b       	sbc	r23, r19
 576:	84 0b       	sbc	r24, r20
 578:	95 0b       	sbc	r25, r21
 57a:	39 f4       	brne	.+14     	; 0x58a <__fp_cmp+0x38>
 57c:	0a 26       	eor	r0, r26
 57e:	61 f0       	breq	.+24     	; 0x598 <__fp_cmp+0x46>
 580:	23 2b       	or	r18, r19
 582:	24 2b       	or	r18, r20
 584:	25 2b       	or	r18, r21
 586:	21 f4       	brne	.+8      	; 0x590 <__fp_cmp+0x3e>
 588:	08 95       	ret
 58a:	0a 26       	eor	r0, r26
 58c:	09 f4       	brne	.+2      	; 0x590 <__fp_cmp+0x3e>
 58e:	a1 40       	sbci	r26, 0x01	; 1
 590:	a6 95       	lsr	r26
 592:	8f ef       	ldi	r24, 0xFF	; 255
 594:	81 1d       	adc	r24, r1
 596:	81 1d       	adc	r24, r1
 598:	08 95       	ret

0000059a <__fp_inf>:
 59a:	97 f9       	bld	r25, 7
 59c:	9f 67       	ori	r25, 0x7F	; 127
 59e:	80 e8       	ldi	r24, 0x80	; 128
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <__fp_nan>:
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	08 95       	ret

000005ac <__fp_pscA>:
 5ac:	00 24       	eor	r0, r0
 5ae:	0a 94       	dec	r0
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	18 06       	cpc	r1, r24
 5b6:	09 06       	cpc	r0, r25
 5b8:	08 95       	ret

000005ba <__fp_pscB>:
 5ba:	00 24       	eor	r0, r0
 5bc:	0a 94       	dec	r0
 5be:	12 16       	cp	r1, r18
 5c0:	13 06       	cpc	r1, r19
 5c2:	14 06       	cpc	r1, r20
 5c4:	05 06       	cpc	r0, r21
 5c6:	08 95       	ret

000005c8 <__fp_round>:
 5c8:	09 2e       	mov	r0, r25
 5ca:	03 94       	inc	r0
 5cc:	00 0c       	add	r0, r0
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__fp_round+0xc>
 5d0:	88 23       	and	r24, r24
 5d2:	52 f0       	brmi	.+20     	; 0x5e8 <__fp_round+0x20>
 5d4:	bb 0f       	add	r27, r27
 5d6:	40 f4       	brcc	.+16     	; 0x5e8 <__fp_round+0x20>
 5d8:	bf 2b       	or	r27, r31
 5da:	11 f4       	brne	.+4      	; 0x5e0 <__fp_round+0x18>
 5dc:	60 ff       	sbrs	r22, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <__fp_round+0x20>
 5e0:	6f 5f       	subi	r22, 0xFF	; 255
 5e2:	7f 4f       	sbci	r23, 0xFF	; 255
 5e4:	8f 4f       	sbci	r24, 0xFF	; 255
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__gesf2>:
 63c:	8a df       	rcall	.-236    	; 0x552 <__fp_cmp>
 63e:	08 f4       	brcc	.+2      	; 0x642 <__gesf2+0x6>
 640:	8f ef       	ldi	r24, 0xFF	; 255
 642:	08 95       	ret

00000644 <__mulsf3>:
 644:	0b d0       	rcall	.+22     	; 0x65c <__mulsf3x>
 646:	c0 cf       	rjmp	.-128    	; 0x5c8 <__fp_round>
 648:	b1 df       	rcall	.-158    	; 0x5ac <__fp_pscA>
 64a:	28 f0       	brcs	.+10     	; 0x656 <__mulsf3+0x12>
 64c:	b6 df       	rcall	.-148    	; 0x5ba <__fp_pscB>
 64e:	18 f0       	brcs	.+6      	; 0x656 <__mulsf3+0x12>
 650:	95 23       	and	r25, r21
 652:	09 f0       	breq	.+2      	; 0x656 <__mulsf3+0x12>
 654:	a2 cf       	rjmp	.-188    	; 0x59a <__fp_inf>
 656:	a7 cf       	rjmp	.-178    	; 0x5a6 <__fp_nan>
 658:	11 24       	eor	r1, r1
 65a:	ea cf       	rjmp	.-44     	; 0x630 <__fp_szero>

0000065c <__mulsf3x>:
 65c:	c6 df       	rcall	.-116    	; 0x5ea <__fp_split3>
 65e:	a0 f3       	brcs	.-24     	; 0x648 <__mulsf3+0x4>

00000660 <__mulsf3_pse>:
 660:	95 9f       	mul	r25, r21
 662:	d1 f3       	breq	.-12     	; 0x658 <__mulsf3+0x14>
 664:	95 0f       	add	r25, r21
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	55 1f       	adc	r21, r21
 66a:	62 9f       	mul	r22, r18
 66c:	f0 01       	movw	r30, r0
 66e:	72 9f       	mul	r23, r18
 670:	bb 27       	eor	r27, r27
 672:	f0 0d       	add	r31, r0
 674:	b1 1d       	adc	r27, r1
 676:	63 9f       	mul	r22, r19
 678:	aa 27       	eor	r26, r26
 67a:	f0 0d       	add	r31, r0
 67c:	b1 1d       	adc	r27, r1
 67e:	aa 1f       	adc	r26, r26
 680:	64 9f       	mul	r22, r20
 682:	66 27       	eor	r22, r22
 684:	b0 0d       	add	r27, r0
 686:	a1 1d       	adc	r26, r1
 688:	66 1f       	adc	r22, r22
 68a:	82 9f       	mul	r24, r18
 68c:	22 27       	eor	r18, r18
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	62 1f       	adc	r22, r18
 694:	73 9f       	mul	r23, r19
 696:	b0 0d       	add	r27, r0
 698:	a1 1d       	adc	r26, r1
 69a:	62 1f       	adc	r22, r18
 69c:	83 9f       	mul	r24, r19
 69e:	a0 0d       	add	r26, r0
 6a0:	61 1d       	adc	r22, r1
 6a2:	22 1f       	adc	r18, r18
 6a4:	74 9f       	mul	r23, r20
 6a6:	33 27       	eor	r19, r19
 6a8:	a0 0d       	add	r26, r0
 6aa:	61 1d       	adc	r22, r1
 6ac:	23 1f       	adc	r18, r19
 6ae:	84 9f       	mul	r24, r20
 6b0:	60 0d       	add	r22, r0
 6b2:	21 1d       	adc	r18, r1
 6b4:	82 2f       	mov	r24, r18
 6b6:	76 2f       	mov	r23, r22
 6b8:	6a 2f       	mov	r22, r26
 6ba:	11 24       	eor	r1, r1
 6bc:	9f 57       	subi	r25, 0x7F	; 127
 6be:	50 40       	sbci	r21, 0x00	; 0
 6c0:	8a f0       	brmi	.+34     	; 0x6e4 <__mulsf3_pse+0x84>
 6c2:	e1 f0       	breq	.+56     	; 0x6fc <__mulsf3_pse+0x9c>
 6c4:	88 23       	and	r24, r24
 6c6:	4a f0       	brmi	.+18     	; 0x6da <__mulsf3_pse+0x7a>
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	bb 1f       	adc	r27, r27
 6ce:	66 1f       	adc	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	91 50       	subi	r25, 0x01	; 1
 6d6:	50 40       	sbci	r21, 0x00	; 0
 6d8:	a9 f7       	brne	.-22     	; 0x6c4 <__mulsf3_pse+0x64>
 6da:	9e 3f       	cpi	r25, 0xFE	; 254
 6dc:	51 05       	cpc	r21, r1
 6de:	70 f0       	brcs	.+28     	; 0x6fc <__mulsf3_pse+0x9c>
 6e0:	5c cf       	rjmp	.-328    	; 0x59a <__fp_inf>
 6e2:	a6 cf       	rjmp	.-180    	; 0x630 <__fp_szero>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	ec f3       	brlt	.-6      	; 0x6e2 <__mulsf3_pse+0x82>
 6e8:	98 3e       	cpi	r25, 0xE8	; 232
 6ea:	dc f3       	brlt	.-10     	; 0x6e2 <__mulsf3_pse+0x82>
 6ec:	86 95       	lsr	r24
 6ee:	77 95       	ror	r23
 6f0:	67 95       	ror	r22
 6f2:	b7 95       	ror	r27
 6f4:	f7 95       	ror	r31
 6f6:	e7 95       	ror	r30
 6f8:	9f 5f       	subi	r25, 0xFF	; 255
 6fa:	c1 f7       	brne	.-16     	; 0x6ec <__mulsf3_pse+0x8c>
 6fc:	fe 2b       	or	r31, r30
 6fe:	88 0f       	add	r24, r24
 700:	91 1d       	adc	r25, r1
 702:	96 95       	lsr	r25
 704:	87 95       	ror	r24
 706:	97 f9       	bld	r25, 7
 708:	08 95       	ret

0000070a <_exit>:
 70a:	f8 94       	cli

0000070c <__stop_program>:
 70c:	ff cf       	rjmp	.-2      	; 0x70c <__stop_program>
