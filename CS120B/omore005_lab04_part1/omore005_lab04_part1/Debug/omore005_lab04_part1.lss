
omore005_lab04_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000882  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ce  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c7  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4d d0       	rcall	.+154    	; 0x144 <main>
  aa:	62 c0       	rjmp	.+196    	; 0x170 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
 */	


	
void tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	
	
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's pins 0-3 as LED output
  b8:	84 e2       	ldi	r24, 0x24	; 36
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
  c2:	85 e2       	ldi	r24, 0x25	; 37
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	10 82       	st	Z, r1
	
	unsigned char tempB  = 0x01;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	89 83       	std	Y+1, r24	; 0x01
	
	switch(state) //Transitions
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	88 2f       	mov	r24, r24
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	d1 f0       	breq	.+52     	; 0x110 <tick+0x62>
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	2c f4       	brge	.+10     	; 0xec <tick+0x3e>
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	49 f0       	breq	.+18     	; 0xf8 <tick+0x4a>
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	69 f0       	breq	.+26     	; 0x104 <tick+0x56>
  ea:	21 c0       	rjmp	.+66     	; 0x12e <tick+0x80>
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	91 05       	cpc	r25, r1
  f0:	91 f0       	breq	.+36     	; 0x116 <tick+0x68>
  f2:	04 97       	sbiw	r24, 0x04	; 4
  f4:	b1 f0       	breq	.+44     	; 0x122 <tick+0x74>
  f6:	1b c0       	rjmp	.+54     	; 0x12e <tick+0x80>
	{
		case START: tempB = 0x01;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	89 83       	std	Y+1, r24	; 0x01
					state  = ON_PRESS;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 102:	15 c0       	rjmp	.+42     	; 0x12e <tick+0x80>
		
		case ON_PRESS: if(tempB == 1) tempB = 0x02;
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	79 f4       	brne	.+30     	; 0x128 <tick+0x7a>
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	89 83       	std	Y+1, r24	; 0x01
		break;
 10e:	0c c0       	rjmp	.+24     	; 0x128 <tick+0x7a>
		
		case ON_RELEASE: tempB = 0x02;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	89 83       	std	Y+1, r24	; 0x01
		break;
 114:	0c c0       	rjmp	.+24     	; 0x12e <tick+0x80>
		
		case OFF_PRESS: if(tempB == 2) tempB = 0x01;
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	82 30       	cpi	r24, 0x02	; 2
 11a:	41 f4       	brne	.+16     	; 0x12c <tick+0x7e>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	89 83       	std	Y+1, r24	; 0x01
		
		break;
 120:	05 c0       	rjmp	.+10     	; 0x12c <tick+0x7e>
		
		case OFF_RELEASE: tempB = 0x01;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	89 83       	std	Y+1, r24	; 0x01
			
		break;	
 126:	03 c0       	rjmp	.+6      	; 0x12e <tick+0x80>
		case START: tempB = 0x01;
					state  = ON_PRESS;
		break;
		
		case ON_PRESS: if(tempB == 1) tempB = 0x02;
		break;
 128:	00 00       	nop
 12a:	01 c0       	rjmp	.+2      	; 0x12e <tick+0x80>
		case ON_RELEASE: tempB = 0x02;
		break;
		
		case OFF_PRESS: if(tempB == 2) tempB = 0x01;
		
		break;
 12c:	00 00       	nop
		
		case ON_PRESS:
		break;
		
		case ON_RELEASE: 
		break;
 12e:	00 00       	nop
		
		case OFF_RELEASE: 
		break;
	}
	
	PORTB = tempB;
 130:	85 e2       	ldi	r24, 0x25	; 37
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	29 81       	ldd	r18, Y+1	; 0x01
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
}
 13a:	00 00       	nop
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <main>:



int main(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
	//initialize Inputs
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's pins 0-3 as button input
 14c:	81 e2       	ldi	r24, 0x21	; 33
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	10 82       	st	Z, r1
 154:	82 e2       	ldi	r24, 0x22	; 34
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
	state = ~(PINA);
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	fc 01       	movw	r30, r24
 164:	80 81       	ld	r24, Z
 166:	80 95       	com	r24
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

    while (1) 
    {
		tick();
 16c:	a0 df       	rcall	.-192    	; 0xae <tick>
    }
 16e:	fe cf       	rjmp	.-4      	; 0x16c <main+0x28>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
