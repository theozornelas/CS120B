
GccApplication10_3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800104  00800104  000003e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b21  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089b  00000000  00000000  00000fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045f  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000111  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002445  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e4       	ldi	r30, 0x4A	; 74
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fd d0       	rcall	.+506    	; 0x2be <main>
  c4:	40 c1       	rjmp	.+640    	; 0x346 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
  fc:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 100:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 104:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_cntcurr>
 126:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x1>
 12a:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x2>
 12e:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 13c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 140:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 144:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr>
 16a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x1>
 16e:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_avr_timer_cntcurr+0x2>
 172:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <_avr_timer_cntcurr>
 19c:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <_avr_timer_cntcurr+0x1>
 1a0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_cntcurr+0x2>
 1a4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <SM_Three_Tick>:
}

enum threeStates{threeInit,first, second, third}threeState;
void SM_Three_Tick(){
	switch(threeState){ // Transitions
 1aa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <threeState>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <SM_Three_Tick+0x1c>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <SM_Three_Tick+0x14>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	59 f0       	breq	.+22     	; 0x1ce <SM_Three_Tick+0x24>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <SM_Three_Tick+0x2c>
 1bc:	10 c0       	rjmp	.+32     	; 0x1de <SM_Three_Tick+0x34>
		case threeInit:
		threeState = first;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <threeState>
		break;
 1c4:	12 c0       	rjmp	.+36     	; 0x1ea <SM_Three_Tick+0x40>
		case first:
		threeState = second;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <threeState>
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <SM_Three_Tick+0x48>
		break;
		case second:
		threeState = third;
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <threeState>
 1d4:	12 c0       	rjmp	.+36     	; 0x1fa <SM_Three_Tick+0x50>
		break;
		case third:
		threeState = first;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <threeState>
		break;
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <SM_Three_Tick+0x40>
	}
	switch(threeState){ // State actions
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	41 f0       	breq	.+16     	; 0x1f2 <SM_Three_Tick+0x48>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	51 f0       	breq	.+20     	; 0x1fa <SM_Three_Tick+0x50>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	59 f4       	brne	.+22     	; 0x200 <SM_Three_Tick+0x56>
		case threeInit:
		break;
		case first:
		threeLEDs = 0x01;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLEDs>
		break;
 1f0:	08 95       	ret
		case second:
		threeLEDs = 0x02;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLEDs>
		break;
 1f8:	08 95       	ret
		case third:
		threeLEDs = 0x04;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLEDs>
 200:	08 95       	ret

00000202 <SM_Single_Tick>:
	}
}

enum singleStates{on, off}singleState;
void SM_Single_Tick(){
	switch(singleState){ // Transitions
 202:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <singleState>
 206:	88 23       	and	r24, r24
 208:	19 f0       	breq	.+6      	; 0x210 <SM_Single_Tick+0xe>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	29 f0       	breq	.+10     	; 0x218 <SM_Single_Tick+0x16>
 20e:	07 c0       	rjmp	.+14     	; 0x21e <SM_Single_Tick+0x1c>
		case on:
		singleState = off;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <singleState>
 216:	0c c0       	rjmp	.+24     	; 0x230 <SM_Single_Tick+0x2e>
		break;
		case off:
		singleState = on;
 218:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <singleState>
 21c:	05 c0       	rjmp	.+10     	; 0x228 <SM_Single_Tick+0x26>
		break;
	}
	switch(singleState){ // State Actions
 21e:	88 23       	and	r24, r24
 220:	19 f0       	breq	.+6      	; 0x228 <SM_Single_Tick+0x26>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	39 f4       	brne	.+14     	; 0x234 <SM_Single_Tick+0x32>
 226:	04 c0       	rjmp	.+8      	; 0x230 <SM_Single_Tick+0x2e>
		case on:
		blinkingLED = 0x08;
 228:	88 e0       	ldi	r24, 0x08	; 8
 22a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <blinkingLED>
		break;
 22e:	08 95       	ret
		case off:
		blinkingLED = 0x00;
 230:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <blinkingLED>
 234:	08 95       	ret

00000236 <SM_output>:
void SM_output(){
	switch(opState){ // Transitions
		case output:
		break;
	}
	switch(opState){ // State actions
 236:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <opState>
 23a:	81 11       	cpse	r24, r1
 23c:	0a c0       	rjmp	.+20     	; 0x252 <SM_output+0x1c>
		case output:
		tmpB = threeLEDs | blinkingLED | soundOutput;
 23e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <threeLEDs>
 242:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <blinkingLED>
 246:	89 2b       	or	r24, r25
 248:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <soundOutput>
 24c:	89 2b       	or	r24, r25
 24e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 252:	08 95       	ret

00000254 <SM_sound>:
	}

}
enum bStates{wait, soundOn, soundOff} bState;
void SM_sound(){
	tmpA = ~PINA & 0x04;
 254:	80 b1       	in	r24, 0x00	; 0
 256:	80 95       	com	r24
 258:	84 70       	andi	r24, 0x04	; 4
 25a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tmpA>
	switch(bState){ // Transitions
 25e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <bState>
 262:	91 30       	cpi	r25, 0x01	; 1
 264:	51 f0       	breq	.+20     	; 0x27a <SM_sound+0x26>
 266:	18 f0       	brcs	.+6      	; 0x26e <SM_sound+0x1a>
 268:	92 30       	cpi	r25, 0x02	; 2
 26a:	81 f0       	breq	.+32     	; 0x28c <SM_sound+0x38>
 26c:	18 c0       	rjmp	.+48     	; 0x29e <SM_sound+0x4a>
		case wait:
		if(tmpA){
 26e:	88 23       	and	r24, r24
 270:	e1 f0       	breq	.+56     	; 0x2aa <SM_sound+0x56>
			bState = soundOn;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <bState>
 278:	1b c0       	rjmp	.+54     	; 0x2b0 <SM_sound+0x5c>
		else{
			bState = wait;
		}
		break;
		case soundOn:
		if(tmpA){
 27a:	88 23       	and	r24, r24
 27c:	21 f0       	breq	.+8      	; 0x286 <SM_sound+0x32>
			bState = soundOff;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <bState>
 284:	19 c0       	rjmp	.+50     	; 0x2b8 <SM_sound+0x64>
		}
		else{
			bState = wait;
 286:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <bState>
 28a:	0f c0       	rjmp	.+30     	; 0x2aa <SM_sound+0x56>
		}
		break;
		case soundOff:
		if(tmpA){
 28c:	88 23       	and	r24, r24
 28e:	21 f0       	breq	.+8      	; 0x298 <SM_sound+0x44>
			bState = soundOn;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <bState>
 296:	0c c0       	rjmp	.+24     	; 0x2b0 <SM_sound+0x5c>
		}
		else{
			bState = wait;
 298:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <bState>
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <SM_sound+0x56>
		}
	}
	switch(bState){ // State actions
 29e:	91 30       	cpi	r25, 0x01	; 1
 2a0:	39 f0       	breq	.+14     	; 0x2b0 <SM_sound+0x5c>
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <SM_sound+0x56>
 2a4:	92 30       	cpi	r25, 0x02	; 2
 2a6:	51 f4       	brne	.+20     	; 0x2bc <SM_sound+0x68>
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <SM_sound+0x64>
		case wait:
		soundOutput = 0x00;
 2aa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <soundOutput>
		break;
 2ae:	08 95       	ret
		case soundOn:
		soundOutput = 0x10;
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <soundOutput>
		break;
 2b6:	08 95       	ret
		case soundOff:
		soundOutput = 0x00;
 2b8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <soundOutput>
 2bc:	08 95       	ret

000002be <main>:
	}
};

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Set A to input and initialize to 0xFF
 2be:	11 b8       	out	0x01, r1	; 1
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // Set B to output and initialize to 0x00
 2c4:	84 b9       	out	0x04, r24	; 4
 2c6:	15 b8       	out	0x05, r1	; 5
	unsigned long largePeriod = 1000;
	unsigned long smallPeriod = 300;
	const unsigned long TimerPeriod = 2;
	unsigned short buzzElapsedTime = 0;

	TimerSet(TimerPeriod);
 2c8:	62 e0       	ldi	r22, 0x02	; 2
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	5b df       	rcall	.-330    	; 0x188 <TimerSet>
	TimerOn();
 2d2:	fa de       	rcall	.-524    	; 0xc8 <TimerOn>
 2d4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <opState>
	
	opState = output;
 2d8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <threeState>
	threeState = threeInit;
 2dc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <singleState>
	singleState = on;
 2e0:	81 2c       	mov	r8, r1
{
	DDRA = 0x00; PORTA = 0xFF; // Set A to input and initialize to 0xFF
	DDRB = 0xFF; PORTB = 0x00; // Set B to output and initialize to 0x00
	//DDRC = 0xFF; PORTC = 0x00; // LCD data lines
	//DDRD = 0xFF; PORTD = 0x00; // LCD control lines
	unsigned long lelapsedTime = 0;
 2e2:	91 2c       	mov	r9, r1
 2e4:	54 01       	movw	r10, r8
 2e6:	c1 2c       	mov	r12, r1
	unsigned long selapsedTime = 0;
 2e8:	d1 2c       	mov	r13, r1
 2ea:	76 01       	movw	r14, r12
 2ec:	0f c0       	rjmp	.+30     	; 0x30c <main+0x4e>
	opState = output;
	threeState = threeInit;
	singleState = on;
	while(1){
		if(lelapsedTime >= largePeriod){
			SM_Single_Tick();
 2ee:	89 df       	rcall	.-238    	; 0x202 <SM_Single_Tick>
 2f0:	81 2c       	mov	r8, r1
			lelapsedTime = 0;
 2f2:	91 2c       	mov	r9, r1
 2f4:	54 01       	movw	r10, r8
 2f6:	8c e2       	ldi	r24, 0x2C	; 44
		}
		if(selapsedTime >= smallPeriod){
 2f8:	c8 16       	cp	r12, r24
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	d8 06       	cpc	r13, r24
 2fe:	e1 04       	cpc	r14, r1
 300:	f1 04       	cpc	r15, r1
 302:	20 f0       	brcs	.+8      	; 0x30c <main+0x4e>
			SM_Three_Tick();
 304:	52 df       	rcall	.-348    	; 0x1aa <SM_Three_Tick>
			selapsedTime = 0;
 306:	c1 2c       	mov	r12, r1
 308:	d1 2c       	mov	r13, r1
		}
		//if (buzzElapsedTime >= 2 && tmpA){
		//	SM_sound();
		//	buzzElapsedTime = 0;
		//}
		SM_sound();
 30a:	76 01       	movw	r14, r12
 30c:	a3 df       	rcall	.-186    	; 0x254 <SM_sound>
		SM_output();
 30e:	93 df       	rcall	.-218    	; 0x236 <SM_output>
 310:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		PORTB = tmpB;
 314:	85 b9       	out	0x05, r24	; 5
 316:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <TimerFlag>
		while(!TimerFlag){}
 31a:	88 23       	and	r24, r24
 31c:	e1 f3       	breq	.-8      	; 0x316 <main+0x58>
 31e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <TimerFlag>
		TimerFlag = 0;
 322:	82 e0       	ldi	r24, 0x02	; 2
		lelapsedTime += TimerPeriod;
 324:	88 0e       	add	r8, r24
 326:	91 1c       	adc	r9, r1
 328:	a1 1c       	adc	r10, r1
 32a:	b1 1c       	adc	r11, r1
 32c:	82 e0       	ldi	r24, 0x02	; 2
		selapsedTime += TimerPeriod;
 32e:	c8 0e       	add	r12, r24
 330:	d1 1c       	adc	r13, r1
 332:	e1 1c       	adc	r14, r1
 334:	f1 1c       	adc	r15, r1
 336:	88 ee       	ldi	r24, 0xE8	; 232
	
	opState = output;
	threeState = threeInit;
	singleState = on;
	while(1){
		if(lelapsedTime >= largePeriod){
 338:	88 16       	cp	r8, r24
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	98 06       	cpc	r9, r24
 33e:	a1 04       	cpc	r10, r1
 340:	b1 04       	cpc	r11, r1
 342:	c8 f2       	brcs	.-78     	; 0x2f6 <main+0x38>
 344:	d4 cf       	rjmp	.-88     	; 0x2ee <main+0x30>

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
