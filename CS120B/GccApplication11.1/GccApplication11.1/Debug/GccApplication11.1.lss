
GccApplication11.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800104  00800104  000004da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df2  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b6  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fe  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000588  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d3  00000000  00000000  00002bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000317f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	c3 c0       	rjmp	.+390    	; 0x1bc <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	78 01       	movw	r14, r16
  8e:	bb 01       	movw	r22, r22
  90:	bb 01       	movw	r22, r22
  92:	bb 01       	movw	r22, r22
  94:	bb 01       	movw	r22, r22
  96:	bb 01       	movw	r22, r22
  98:	bb 01       	movw	r22, r22
  9a:	bb 01       	movw	r22, r22
  9c:	bb 01       	movw	r22, r22
  9e:	bb 01       	movw	r22, r22
  a0:	bb 01       	movw	r22, r22
  a2:	bb 01       	movw	r22, r22
  a4:	bb 01       	movw	r22, r22
  a6:	bb 01       	movw	r22, r22
  a8:	bb 01       	movw	r22, r22
  aa:	bb 01       	movw	r22, r22
  ac:	bb 01       	movw	r22, r22
  ae:	bb 01       	movw	r22, r22
  b0:	bb 01       	movw	r22, r22
  b2:	bb 01       	movw	r22, r22
  b4:	bb 01       	movw	r22, r22
  b6:	bb 01       	movw	r22, r22
  b8:	bb 01       	movw	r22, r22
  ba:	bb 01       	movw	r22, r22
  bc:	bb 01       	movw	r22, r22
  be:	bb 01       	movw	r22, r22
  c0:	bb 01       	movw	r22, r22
  c2:	bb 01       	movw	r22, r22
  c4:	bb 01       	movw	r22, r22
  c6:	bb 01       	movw	r22, r22
  c8:	bb 01       	movw	r22, r22
  ca:	bb 01       	movw	r22, r22
  cc:	bb 01       	movw	r22, r22
  ce:	bb 01       	movw	r22, r22
  d0:	bb 01       	movw	r22, r22
  d2:	b7 01       	movw	r22, r14
  d4:	bb 01       	movw	r22, r22
  d6:	bb 01       	movw	r22, r22
  d8:	bb 01       	movw	r22, r22
  da:	bb 01       	movw	r22, r22
  dc:	bb 01       	movw	r22, r22
  de:	bb 01       	movw	r22, r22
  e0:	b0 01       	movw	r22, r0
  e2:	bb 01       	movw	r22, r22
  e4:	bb 01       	movw	r22, r22
  e6:	bb 01       	movw	r22, r22
  e8:	bb 01       	movw	r22, r22
  ea:	bb 01       	movw	r22, r22
  ec:	b4 01       	movw	r22, r8
  ee:	7c 01       	movw	r14, r24
  f0:	80 01       	movw	r16, r0
  f2:	84 01       	movw	r16, r8
  f4:	88 01       	movw	r16, r16
  f6:	8c 01       	movw	r16, r24
  f8:	90 01       	movw	r18, r0
  fa:	94 01       	movw	r18, r8
  fc:	98 01       	movw	r18, r16
  fe:	9c 01       	movw	r18, r24
 100:	bb 01       	movw	r22, r22
 102:	bb 01       	movw	r22, r22
 104:	bb 01       	movw	r22, r22
 106:	bb 01       	movw	r22, r22
 108:	bb 01       	movw	r22, r22
 10a:	bb 01       	movw	r22, r22
 10c:	bb 01       	movw	r22, r22
 10e:	a0 01       	movw	r20, r0
 110:	a4 01       	movw	r20, r8
 112:	a8 01       	movw	r20, r16
 114:	ac 01       	movw	r20, r24

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e2 e4       	ldi	r30, 0x42	; 66
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a5 31       	cpi	r26, 0x15	; 21
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	1e d1       	rcall	.+572    	; 0x38a <main>
 14e:	77 c1       	rjmp	.+750    	; 0x43e <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <TimerSet>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
 152:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 156:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 15a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 15e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 162:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_cntcurr>
 166:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_cntcurr+0x1>
 16a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr+0x2>
 16e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x3>
 172:	08 95       	ret

00000174 <TimerOn>:
 174:	8b e0       	ldi	r24, 0x0B	; 11
 176:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 17a:	8d e7       	ldi	r24, 0x7D	; 125
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 182:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 18c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 190:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 194:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 198:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 19c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 1a8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 1ac:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 1b0:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 1b4:	8f b7       	in	r24, 0x3f	; 63
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8f bf       	out	0x3f, r24	; 63
 1ba:	08 95       	ret

000001bc <__vector_13>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
 1ca:	af 93       	push	r26
 1cc:	bf 93       	push	r27
 1ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_cntcurr>
 1d2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x1>
 1d6:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x2>
 1da:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x3>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	a1 09       	sbc	r26, r1
 1e2:	b1 09       	sbc	r27, r1
 1e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 1e8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 1ec:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 1f0:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 1f4:	89 2b       	or	r24, r25
 1f6:	8a 2b       	or	r24, r26
 1f8:	8b 2b       	or	r24, r27
 1fa:	99 f4       	brne	.+38     	; 0x222 <__vector_13+0x66>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <TimerFlag>
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 20e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 212:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 216:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 21a:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 21e:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <GetKeypadKey>:
 234:	8f ee       	ldi	r24, 0xEF	; 239
 236:	88 b9       	out	0x08, r24	; 8
 238:	00 00       	nop
 23a:	30 9b       	sbis	0x06, 0	; 6
 23c:	29 c0       	rjmp	.+82     	; 0x290 <GetKeypadKey+0x5c>
 23e:	31 9b       	sbis	0x06, 1	; 6
 240:	29 c0       	rjmp	.+82     	; 0x294 <GetKeypadKey+0x60>
 242:	32 9b       	sbis	0x06, 2	; 6
 244:	29 c0       	rjmp	.+82     	; 0x298 <GetKeypadKey+0x64>
 246:	33 9b       	sbis	0x06, 3	; 6
 248:	29 c0       	rjmp	.+82     	; 0x29c <GetKeypadKey+0x68>
 24a:	8f ed       	ldi	r24, 0xDF	; 223
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	00 00       	nop
 250:	30 9b       	sbis	0x06, 0	; 6
 252:	26 c0       	rjmp	.+76     	; 0x2a0 <GetKeypadKey+0x6c>
 254:	31 9b       	sbis	0x06, 1	; 6
 256:	26 c0       	rjmp	.+76     	; 0x2a4 <GetKeypadKey+0x70>
 258:	32 9b       	sbis	0x06, 2	; 6
 25a:	26 c0       	rjmp	.+76     	; 0x2a8 <GetKeypadKey+0x74>
 25c:	33 9b       	sbis	0x06, 3	; 6
 25e:	26 c0       	rjmp	.+76     	; 0x2ac <GetKeypadKey+0x78>
 260:	8f eb       	ldi	r24, 0xBF	; 191
 262:	88 b9       	out	0x08, r24	; 8
 264:	00 00       	nop
 266:	30 9b       	sbis	0x06, 0	; 6
 268:	23 c0       	rjmp	.+70     	; 0x2b0 <GetKeypadKey+0x7c>
 26a:	31 9b       	sbis	0x06, 1	; 6
 26c:	23 c0       	rjmp	.+70     	; 0x2b4 <GetKeypadKey+0x80>
 26e:	32 9b       	sbis	0x06, 2	; 6
 270:	23 c0       	rjmp	.+70     	; 0x2b8 <GetKeypadKey+0x84>
 272:	33 9b       	sbis	0x06, 3	; 6
 274:	23 c0       	rjmp	.+70     	; 0x2bc <GetKeypadKey+0x88>
 276:	8f e7       	ldi	r24, 0x7F	; 127
 278:	88 b9       	out	0x08, r24	; 8
 27a:	00 00       	nop
 27c:	30 9b       	sbis	0x06, 0	; 6
 27e:	20 c0       	rjmp	.+64     	; 0x2c0 <GetKeypadKey+0x8c>
 280:	31 9b       	sbis	0x06, 1	; 6
 282:	20 c0       	rjmp	.+64     	; 0x2c4 <GetKeypadKey+0x90>
 284:	32 9b       	sbis	0x06, 2	; 6
 286:	20 c0       	rjmp	.+64     	; 0x2c8 <GetKeypadKey+0x94>
 288:	33 9b       	sbis	0x06, 3	; 6
 28a:	20 c0       	rjmp	.+64     	; 0x2cc <GetKeypadKey+0x98>
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
 290:	81 e3       	ldi	r24, 0x31	; 49
 292:	08 95       	ret
 294:	84 e3       	ldi	r24, 0x34	; 52
 296:	08 95       	ret
 298:	87 e3       	ldi	r24, 0x37	; 55
 29a:	08 95       	ret
 29c:	8a e2       	ldi	r24, 0x2A	; 42
 29e:	08 95       	ret
 2a0:	82 e3       	ldi	r24, 0x32	; 50
 2a2:	08 95       	ret
 2a4:	85 e3       	ldi	r24, 0x35	; 53
 2a6:	08 95       	ret
 2a8:	88 e3       	ldi	r24, 0x38	; 56
 2aa:	08 95       	ret
 2ac:	80 e3       	ldi	r24, 0x30	; 48
 2ae:	08 95       	ret
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	08 95       	ret
 2b4:	86 e3       	ldi	r24, 0x36	; 54
 2b6:	08 95       	ret
 2b8:	89 e3       	ldi	r24, 0x39	; 57
 2ba:	08 95       	ret
 2bc:	83 e2       	ldi	r24, 0x23	; 35
 2be:	08 95       	ret
 2c0:	81 e4       	ldi	r24, 0x41	; 65
 2c2:	08 95       	ret
 2c4:	82 e4       	ldi	r24, 0x42	; 66
 2c6:	08 95       	ret
 2c8:	83 e4       	ldi	r24, 0x43	; 67
 2ca:	08 95       	ret
 2cc:	84 e4       	ldi	r24, 0x44	; 68
 2ce:	08 95       	ret

000002d0 <SMTick1>:
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
 2d6:	ae df       	rcall	.-164    	; 0x234 <GetKeypadKey>
 2d8:	20 97       	sbiw	r28, 0x00	; 0
 2da:	09 f0       	breq	.+2      	; 0x2de <SMTick1+0xe>
 2dc:	52 c0       	rjmp	.+164    	; 0x382 <SMTick1+0xb2>
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	85 34       	cpi	r24, 0x45	; 69
 2e2:	91 05       	cpc	r25, r1
 2e4:	08 f0       	brcs	.+2      	; 0x2e8 <SMTick1+0x18>
 2e6:	47 c0       	rjmp	.+142    	; 0x376 <SMTick1+0xa6>
 2e8:	fc 01       	movw	r30, r24
 2ea:	ea 5b       	subi	r30, 0xBA	; 186
 2ec:	ff 4f       	sbci	r31, 0xFF	; 255
 2ee:	9e c0       	rjmp	.+316    	; 0x42c <__tablejump2__>
 2f0:	8f e1       	ldi	r24, 0x1F	; 31
 2f2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 2f6:	42 c0       	rjmp	.+132    	; 0x37c <SMTick1+0xac>
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 2fe:	3e c0       	rjmp	.+124    	; 0x37c <SMTick1+0xac>
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 306:	3a c0       	rjmp	.+116    	; 0x37c <SMTick1+0xac>
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 30e:	36 c0       	rjmp	.+108    	; 0x37c <SMTick1+0xac>
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 316:	32 c0       	rjmp	.+100    	; 0x37c <SMTick1+0xac>
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 31e:	2e c0       	rjmp	.+92     	; 0x37c <SMTick1+0xac>
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 326:	2a c0       	rjmp	.+84     	; 0x37c <SMTick1+0xac>
 328:	87 e0       	ldi	r24, 0x07	; 7
 32a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 32e:	26 c0       	rjmp	.+76     	; 0x37c <SMTick1+0xac>
 330:	88 e0       	ldi	r24, 0x08	; 8
 332:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 336:	22 c0       	rjmp	.+68     	; 0x37c <SMTick1+0xac>
 338:	89 e0       	ldi	r24, 0x09	; 9
 33a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 33e:	1e c0       	rjmp	.+60     	; 0x37c <SMTick1+0xac>
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 346:	1a c0       	rjmp	.+52     	; 0x37c <SMTick1+0xac>
 348:	8b e0       	ldi	r24, 0x0B	; 11
 34a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 34e:	16 c0       	rjmp	.+44     	; 0x37c <SMTick1+0xac>
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 356:	12 c0       	rjmp	.+36     	; 0x37c <SMTick1+0xac>
 358:	8d e0       	ldi	r24, 0x0D	; 13
 35a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 35e:	0e c0       	rjmp	.+28     	; 0x37c <SMTick1+0xac>
 360:	8e e0       	ldi	r24, 0x0E	; 14
 362:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 366:	0a c0       	rjmp	.+20     	; 0x37c <SMTick1+0xac>
 368:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <tmpB>
 36c:	07 c0       	rjmp	.+14     	; 0x37c <SMTick1+0xac>
 36e:	8f e0       	ldi	r24, 0x0F	; 15
 370:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 374:	03 c0       	rjmp	.+6      	; 0x37c <SMTick1+0xac>
 376:	8b e1       	ldi	r24, 0x1B	; 27
 378:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <tmpB>
 37c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <tmpB>
 380:	85 b9       	out	0x05, r24	; 5
 382:	ce 01       	movw	r24, r28
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <main>:

int main()
{
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xFF; PORTA = 0x00;
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	81 b9       	out	0x01, r24	; 1
 38e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
 390:	84 b9       	out	0x04, r24	; 4
 392:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 394:	90 ef       	ldi	r25, 0xF0	; 240
 396:	97 b9       	out	0x07, r25	; 7
 398:	9f e0       	ldi	r25, 0x0F	; 15
 39a:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00;
 39c:	8a b9       	out	0x0a, r24	; 10
 39e:	1b b8       	out	0x0b, r1	; 11
	static task task1;
	task *tasks[] = { &task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = 0;//Task initial state.
 3a0:	e4 e0       	ldi	r30, 0x04	; 4
 3a2:	f1 e0       	ldi	r31, 0x01	; 1
 3a4:	10 82       	st	Z, r1
	task1.period = SMTick1_period;//Task Period.
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	a0 e0       	ldi	r26, 0x00	; 0
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	81 83       	std	Z+1, r24	; 0x01
 3b0:	92 83       	std	Z+2, r25	; 0x02
 3b2:	a3 83       	std	Z+3, r26	; 0x03
 3b4:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3b6:	85 83       	std	Z+5, r24	; 0x05
 3b8:	96 83       	std	Z+6, r25	; 0x06
 3ba:	a7 83       	std	Z+7, r26	; 0x07
 3bc:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 3be:	88 e6       	ldi	r24, 0x68	; 104
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	92 87       	std	Z+10, r25	; 0x0a
 3c4:	81 87       	std	Z+9, r24	; 0x09


	// Set the timer and turn it on
	TimerSet(GCD);
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	c1 de       	rcall	.-638    	; 0x152 <TimerSet>
	TimerOn();
 3d0:	d1 de       	rcall	.-606    	; 0x174 <TimerOn>
 3d2:	c4 e0       	ldi	r28, 0x04	; 4
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3d4:	d1 e0       	ldi	r29, 0x01	; 1
 3d6:	4d 81       	ldd	r20, Y+5	; 0x05
 3d8:	5e 81       	ldd	r21, Y+6	; 0x06
 3da:	6f 81       	ldd	r22, Y+7	; 0x07
 3dc:	78 85       	ldd	r23, Y+8	; 0x08
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	9a 81       	ldd	r25, Y+2	; 0x02
 3e2:	ab 81       	ldd	r26, Y+3	; 0x03
 3e4:	bc 81       	ldd	r27, Y+4	; 0x04
 3e6:	48 17       	cp	r20, r24
 3e8:	59 07       	cpc	r21, r25
 3ea:	6a 07       	cpc	r22, r26
 3ec:	7b 07       	cpc	r23, r27
 3ee:	61 f4       	brne	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f0:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3f2:	e9 85       	ldd	r30, Y+9	; 0x09
 3f4:	fa 85       	ldd	r31, Y+10	; 0x0a
 3f6:	08 2e       	mov	r0, r24
 3f8:	00 0c       	add	r0, r0
 3fa:	99 0b       	sbc	r25, r25
 3fc:	09 95       	icall
 3fe:	88 83       	st	Y, r24
 400:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 402:	1e 82       	std	Y+6, r1	; 0x06
 404:	1f 82       	std	Y+7, r1	; 0x07
 406:	18 86       	std	Y+8, r1	; 0x08
 408:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 40a:	9e 81       	ldd	r25, Y+6	; 0x06
 40c:	af 81       	ldd	r26, Y+7	; 0x07
 40e:	b8 85       	ldd	r27, Y+8	; 0x08
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	a1 1d       	adc	r26, r1
 414:	b1 1d       	adc	r27, r1
 416:	8d 83       	std	Y+5, r24	; 0x05
 418:	9e 83       	std	Y+6, r25	; 0x06
 41a:	af 83       	std	Y+7, r26	; 0x07
 41c:	b8 87       	std	Y+8, r27	; 0x08
 41e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TimerFlag>
		}
		while(!TimerFlag);
 422:	88 23       	and	r24, r24
 424:	e1 f3       	breq	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TimerFlag>
		TimerFlag = 0;
 42a:	d5 cf       	rjmp	.-86     	; 0x3d6 <main+0x4c>

0000042c <__tablejump2__>:
	}
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	00 24       	eor	r0, r0
 432:	00 1c       	adc	r0, r0
 434:	0b be       	out	0x3b, r0	; 59
 436:	07 90       	elpm	r0, Z+
 438:	f6 91       	elpm	r31, Z
 43a:	e0 2d       	mov	r30, r0
 43c:	09 94       	ijmp

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
