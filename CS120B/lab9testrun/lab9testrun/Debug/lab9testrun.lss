
lab9testrun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000730  000007c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000730  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000007c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091b  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080b  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000489  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000464  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014e  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000249a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e3       	ldi	r30, 0x30	; 48
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a1 d1       	rcall	.+834    	; 0x406 <main>
  c4:	33 c3       	rjmp	.+1638   	; 0x72c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <set_PWM>:


// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <set_PWM+0xa>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <set_PWM+0xc>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	69 83       	std	Y+1, r22	; 0x01
  da:	7a 83       	std	Y+2, r23	; 0x02
  dc:	8b 83       	std	Y+3, r24	; 0x03
  de:	9c 83       	std	Y+4, r25	; 0x04

	// Will only update the registers when the frequency changes, otherwise allows

	// music to play uninterrupted.

	if (frequency != current_frequency) {
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  e8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  ec:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f0:	9c 01       	movw	r18, r24
  f2:	ad 01       	movw	r20, r26
  f4:	69 81       	ldd	r22, Y+1	; 0x01
  f6:	7a 81       	ldd	r23, Y+2	; 0x02
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	9c 81       	ldd	r25, Y+4	; 0x04
  fc:	9e d1       	rcall	.+828    	; 0x43a <__cmpsf2>
  fe:	88 23       	and	r24, r24
 100:	09 f4       	brne	.+2      	; 0x104 <set_PWM+0x3c>

		current_frequency = frequency; // Updates the current frequency

	}

}
 102:	71 c0       	rjmp	.+226    	; 0x1e6 <set_PWM+0x11e>

	// music to play uninterrupted.

	if (frequency != current_frequency) {

		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	a9 01       	movw	r20, r18
 10a:	69 81       	ldd	r22, Y+1	; 0x01
 10c:	7a 81       	ldd	r23, Y+2	; 0x02
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	93 d1       	rcall	.+806    	; 0x43a <__cmpsf2>
 114:	88 23       	and	r24, r24
 116:	51 f4       	brne	.+20     	; 0x12c <set_PWM+0x64>
 118:	81 e9       	ldi	r24, 0x91	; 145
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	21 e9       	ldi	r18, 0x91	; 145
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	28 70       	andi	r18, 0x08	; 8
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	09 c0       	rjmp	.+18     	; 0x13e <set_PWM+0x76>

		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 12c:	81 e9       	ldi	r24, 0x91	; 145
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	21 e9       	ldi	r18, 0x91	; 145
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	23 60       	ori	r18, 0x03	; 3
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18

		// prevents OCR3A from overflowing, using prescaler 64

		// 0.954 is smallest frequency that will not result in overflow

		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 13e:	28 e5       	ldi	r18, 0x58	; 88
 140:	39 e3       	ldi	r19, 0x39	; 57
 142:	44 e7       	ldi	r20, 0x74	; 116
 144:	5f e3       	ldi	r21, 0x3F	; 63
 146:	69 81       	ldd	r22, Y+1	; 0x01
 148:	7a 81       	ldd	r23, Y+2	; 0x02
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	9c 81       	ldd	r25, Y+4	; 0x04
 14e:	75 d1       	rcall	.+746    	; 0x43a <__cmpsf2>
 150:	88 23       	and	r24, r24
 152:	44 f4       	brge	.+16     	; 0x164 <set_PWM+0x9c>
 154:	88 e9       	ldi	r24, 0x98	; 152
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	3f ef       	ldi	r19, 0xFF	; 255
 15c:	fc 01       	movw	r30, r24
 15e:	31 83       	std	Z+1, r19	; 0x01
 160:	20 83       	st	Z, r18
 162:	30 c0       	rjmp	.+96     	; 0x1c4 <set_PWM+0xfc>

		

		// prevents OCR0A from underflowing, using prescaler 64     // 31250 is largest frequency that will not result in underflow

		else if (frequency > 31250) { OCR3A = 0x0000; }
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	34 e2       	ldi	r19, 0x24	; 36
 168:	44 ef       	ldi	r20, 0xF4	; 244
 16a:	56 e4       	ldi	r21, 0x46	; 70
 16c:	69 81       	ldd	r22, Y+1	; 0x01
 16e:	7a 81       	ldd	r23, Y+2	; 0x02
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	74 d2       	rcall	.+1256   	; 0x65e <__gesf2>
 176:	18 16       	cp	r1, r24
 178:	34 f4       	brge	.+12     	; 0x186 <set_PWM+0xbe>
 17a:	88 e9       	ldi	r24, 0x98	; 152
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	11 82       	std	Z+1, r1	; 0x01
 182:	10 82       	st	Z, r1
 184:	1f c0       	rjmp	.+62     	; 0x1c4 <set_PWM+0xfc>

		

		// set OCR3A based on desired frequency

		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 186:	08 e9       	ldi	r16, 0x98	; 152
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	53 e4       	ldi	r21, 0x43	; 67
 192:	69 81       	ldd	r22, Y+1	; 0x01
 194:	7a 81       	ldd	r23, Y+2	; 0x02
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	9c 81       	ldd	r25, Y+4	; 0x04
 19a:	65 d2       	rcall	.+1226   	; 0x666 <__mulsf3>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	9c 01       	movw	r18, r24
 1a2:	ad 01       	movw	r20, r26
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	74 e2       	ldi	r23, 0x24	; 36
 1a8:	84 ef       	ldi	r24, 0xF4	; 244
 1aa:	9a e4       	ldi	r25, 0x4A	; 74
 1ac:	4a d1       	rcall	.+660    	; 0x442 <__divsf3>
 1ae:	dc 01       	movw	r26, r24
 1b0:	cb 01       	movw	r24, r22
 1b2:	bc 01       	movw	r22, r24
 1b4:	cd 01       	movw	r24, r26
 1b6:	ad d1       	rcall	.+858    	; 0x512 <__fixsfsi>
 1b8:	dc 01       	movw	r26, r24
 1ba:	cb 01       	movw	r24, r22
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f8 01       	movw	r30, r16
 1c0:	91 83       	std	Z+1, r25	; 0x01
 1c2:	80 83       	st	Z, r24

		

		TCNT3 = 0; // resets counter
 1c4:	84 e9       	ldi	r24, 0x94	; 148
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	11 82       	std	Z+1, r1	; 0x01
 1cc:	10 82       	st	Z, r1

		current_frequency = frequency; // Updates the current frequency
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	9a 81       	ldd	r25, Y+2	; 0x02
 1d2:	ab 81       	ldd	r26, Y+3	; 0x03
 1d4:	bc 81       	ldd	r27, Y+4	; 0x04
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 1da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 1e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>

	}

}
 1e6:	00 00       	nop
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <PWM_on>:



void PWM_on() {
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62

	TCCR3A = (1 << COM3A0);
 202:	80 e9       	ldi	r24, 0x90	; 144
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	20 e4       	ldi	r18, 0x40	; 64
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18

	// COM3A0: Toggle PB3 on compare match between counter and OCR0A

	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 20c:	81 e9       	ldi	r24, 0x91	; 145
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	2b e0       	ldi	r18, 0x0B	; 11
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18

	// WGM02: When counter (TCNT0) matches OCR0A, reset counter

	// CS01 & CS30: Set a prescaler of 64

	set_PWM(0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	cb 01       	movw	r24, r22
 21c:	55 df       	rcall	.-342    	; 0xc8 <set_PWM>

}
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <PWM_off>:



void PWM_off() {
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62

	TCCR3A = 0x00;
 22e:	80 e9       	ldi	r24, 0x90	; 144
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	10 82       	st	Z, r1

	TCCR3B = 0x00;
 236:	81 e9       	ldi	r24, 0x91	; 145
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	10 82       	st	Z, r1

}
 23e:	00 00       	nop
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <tickFct>:





void tickFct() {
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
	C4_button = (~PINA) & 0x01;
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	80 81       	ld	r24, Z
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	81 70       	andi	r24, 0x01	; 1
 25c:	99 27       	eor	r25, r25
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	89 2b       	or	r24, r25
 262:	09 f0       	breq	.+2      	; 0x266 <tickFct+0x20>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	82 2f       	mov	r24, r18
 268:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	D4_button = (~PINA) & 0x02;
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	80 81       	ld	r24, Z
 274:	80 95       	com	r24
 276:	82 70       	andi	r24, 0x02	; 2
 278:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <D4_button>
	E4_button = (~PINA) & 0x04;
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	80 95       	com	r24
 286:	84 70       	andi	r24, 0x04	; 4
 288:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <E4_button>
	
	//C4_button = (PINA) & 0x01;
	//D4_button = (PINA) & 0x02;
	//E4_button = (PINA) & 0x04;
	
	switch (mySM) {
 28c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mySM>
 290:	88 2f       	mov	r24, r24
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	91 05       	cpc	r25, r1
 298:	09 f4       	brne	.+2      	; 0x29c <tickFct+0x56>
 29a:	5b c0       	rjmp	.+182    	; 0x352 <tickFct+0x10c>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	91 05       	cpc	r25, r1
 2a0:	2c f4       	brge	.+10     	; 0x2ac <tickFct+0x66>
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	59 f0       	breq	.+22     	; 0x2bc <tickFct+0x76>
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <tickFct+0x7e>
 2aa:	8f c0       	rjmp	.+286    	; 0x3ca <tickFct+0x184>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	91 05       	cpc	r25, r1
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <tickFct+0x6e>
 2b2:	63 c0       	rjmp	.+198    	; 0x37a <tickFct+0x134>
 2b4:	04 97       	sbiw	r24, 0x04	; 4
 2b6:	09 f4       	brne	.+2      	; 0x2ba <tickFct+0x74>
 2b8:	74 c0       	rjmp	.+232    	; 0x3a2 <tickFct+0x15c>
 2ba:	87 c0       	rjmp	.+270    	; 0x3ca <tickFct+0x184>
		case SM_Start:
		mySM = SM_wait;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
		break;
 2c2:	87 c0       	rjmp	.+270    	; 0x3d2 <tickFct+0x18c>
		case SM_wait:
		if (C4_button && !D4_button && !E4_button) {
 2c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2c8:	88 23       	and	r24, r24
 2ca:	91 f0       	breq	.+36     	; 0x2f0 <tickFct+0xaa>
 2cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <D4_button>
 2d0:	88 23       	and	r24, r24
 2d2:	71 f4       	brne	.+28     	; 0x2f0 <tickFct+0xaa>
 2d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <E4_button>
 2d8:	88 23       	and	r24, r24
 2da:	51 f4       	brne	.+20     	; 0x2f0 <tickFct+0xaa>
			mySM = SM_C4;
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
			PWM_on();
 2e2:	8b df       	rcall	.-234    	; 0x1fa <PWM_on>
			set_PWM(261.63);
 2e4:	64 ea       	ldi	r22, 0xA4	; 164
 2e6:	70 ed       	ldi	r23, 0xD0	; 208
 2e8:	82 e8       	ldi	r24, 0x82	; 130
 2ea:	93 e4       	ldi	r25, 0x43	; 67
 2ec:	ed de       	rcall	.-550    	; 0xc8 <set_PWM>
 2ee:	30 c0       	rjmp	.+96     	; 0x350 <tickFct+0x10a>
			} else if (D4_button &&!C4_button && !E4_button ) {
 2f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <D4_button>
 2f4:	88 23       	and	r24, r24
 2f6:	91 f0       	breq	.+36     	; 0x31c <tickFct+0xd6>
 2f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2fc:	88 23       	and	r24, r24
 2fe:	71 f4       	brne	.+28     	; 0x31c <tickFct+0xd6>
 300:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <E4_button>
 304:	88 23       	and	r24, r24
 306:	51 f4       	brne	.+20     	; 0x31c <tickFct+0xd6>
			mySM = SM_D4;
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
			PWM_on();
 30e:	75 df       	rcall	.-278    	; 0x1fa <PWM_on>
			set_PWM(293.66);
 310:	6b e7       	ldi	r22, 0x7B	; 123
 312:	74 ed       	ldi	r23, 0xD4	; 212
 314:	82 e9       	ldi	r24, 0x92	; 146
 316:	93 e4       	ldi	r25, 0x43	; 67
 318:	d7 de       	rcall	.-594    	; 0xc8 <set_PWM>
 31a:	1a c0       	rjmp	.+52     	; 0x350 <tickFct+0x10a>
			} else if (E4_button && !C4_button && !D4_button ) {
 31c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <E4_button>
 320:	88 23       	and	r24, r24
 322:	91 f0       	breq	.+36     	; 0x348 <tickFct+0x102>
 324:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 328:	88 23       	and	r24, r24
 32a:	71 f4       	brne	.+28     	; 0x348 <tickFct+0x102>
 32c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <D4_button>
 330:	88 23       	and	r24, r24
			mySM = SM_E4;
 332:	51 f4       	brne	.+20     	; 0x348 <tickFct+0x102>
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
			PWM_on();
			set_PWM(329.63);
 33a:	5f df       	rcall	.-322    	; 0x1fa <PWM_on>
 33c:	64 ea       	ldi	r22, 0xA4	; 164
 33e:	70 ed       	ldi	r23, 0xD0	; 208
 340:	84 ea       	ldi	r24, 0xA4	; 164
 342:	93 e4       	ldi	r25, 0x43	; 67
 344:	c1 de       	rcall	.-638    	; 0xc8 <set_PWM>
 346:	04 c0       	rjmp	.+8      	; 0x350 <tickFct+0x10a>
		}
		else mySM = SM_wait;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
		//PWM_on();
		//set_PWM(261.63); //DO NOT LEAVE IN

		break;
 34e:	41 c0       	rjmp	.+130    	; 0x3d2 <tickFct+0x18c>
 350:	40 c0       	rjmp	.+128    	; 0x3d2 <tickFct+0x18c>
		case SM_C4:
		if (C4_button && !D4_button && !E4_button) {
 352:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 356:	88 23       	and	r24, r24
 358:	61 f0       	breq	.+24     	; 0x372 <tickFct+0x12c>
 35a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <D4_button>
 35e:	88 23       	and	r24, r24
 360:	41 f4       	brne	.+16     	; 0x372 <tickFct+0x12c>
 362:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <E4_button>
 366:	88 23       	and	r24, r24
 368:	21 f4       	brne	.+8      	; 0x372 <tickFct+0x12c>
			mySM = SM_C4;
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
			} else {
			mySM = SM_wait;
		}
		break;
 370:	30 c0       	rjmp	.+96     	; 0x3d2 <tickFct+0x18c>
		break;
		case SM_C4:
		if (C4_button && !D4_button && !E4_button) {
			mySM = SM_C4;
			} else {
			mySM = SM_wait;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
		}
		break;
 378:	2c c0       	rjmp	.+88     	; 0x3d2 <tickFct+0x18c>
		case SM_D4:
		if (D4_button &&!C4_button && !E4_button) {
 37a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <D4_button>
 37e:	88 23       	and	r24, r24
 380:	61 f0       	breq	.+24     	; 0x39a <tickFct+0x154>
 382:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 386:	88 23       	and	r24, r24
 388:	41 f4       	brne	.+16     	; 0x39a <tickFct+0x154>
 38a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <E4_button>
 38e:	88 23       	and	r24, r24
 390:	21 f4       	brne	.+8      	; 0x39a <tickFct+0x154>
			mySM = SM_D4;
 392:	83 e0       	ldi	r24, 0x03	; 3
 394:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
			} else {
			mySM = SM_wait;
		}
		break;
 398:	1c c0       	rjmp	.+56     	; 0x3d2 <tickFct+0x18c>
		break;
		case SM_D4:
		if (D4_button &&!C4_button && !E4_button) {
			mySM = SM_D4;
			} else {
			mySM = SM_wait;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
		}
		break;
 3a0:	18 c0       	rjmp	.+48     	; 0x3d2 <tickFct+0x18c>
		case SM_E4:
		if (E4_button && !C4_button && !D4_button) {
 3a2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <E4_button>
 3a6:	88 23       	and	r24, r24
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <tickFct+0x17c>
 3aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 3ae:	88 23       	and	r24, r24
 3b0:	41 f4       	brne	.+16     	; 0x3c2 <tickFct+0x17c>
 3b2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <D4_button>
 3b6:	88 23       	and	r24, r24
 3b8:	21 f4       	brne	.+8      	; 0x3c2 <tickFct+0x17c>
			mySM = SM_E4;
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
			} else {
			mySM = SM_wait;
		}
		break;
 3c0:	08 c0       	rjmp	.+16     	; 0x3d2 <tickFct+0x18c>
		break;
		case SM_E4:
		if (E4_button && !C4_button && !D4_button) {
			mySM = SM_E4;
			} else {
			mySM = SM_wait;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
		}
		break;
 3c8:	04 c0       	rjmp	.+8      	; 0x3d2 <tickFct+0x18c>
		default:
		mySM = SM_wait;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mySM>
		break;
 3d0:	00 00       	nop
	}
	switch (mySM) {
 3d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mySM>
 3d6:	88 2f       	mov	r24, r24
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	82 30       	cpi	r24, 0x02	; 2
 3dc:	91 05       	cpc	r25, r1
 3de:	51 f0       	breq	.+20     	; 0x3f4 <tickFct+0x1ae>
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	91 05       	cpc	r25, r1
 3e4:	4c f4       	brge	.+18     	; 0x3f8 <tickFct+0x1b2>
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	49 f0       	breq	.+18     	; 0x3fc <tickFct+0x1b6>
 3ea:	01 97       	sbiw	r24, 0x01	; 1
		//PWM_on();
		//set_PWM(329.63);
		break;

	}
}
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <tickFct+0x1aa>
	switch (mySM) {
		case SM_Start:
		//do nothing
		break;
		case SM_wait:
		PWM_off();
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <tickFct+0x1b8>
 3f0:	1a df       	rcall	.-460    	; 0x226 <PWM_off>
		break;
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <tickFct+0x1b8>
		case SM_C4:
		//PWM_on();
		//set_PWM(261.63);
		break;
 3f4:	00 00       	nop
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <tickFct+0x1b8>
		case SM_D4:
		//PWM_on();
		//set_PWM(293.66);
		break;
 3f8:	00 00       	nop
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <tickFct+0x1b8>
		break;
	}
	switch (mySM) {
		case SM_Start:
		//do nothing
		break;
 3fc:	00 00       	nop
		//PWM_on();
		//set_PWM(329.63);
		break;

	}
}
 3fe:	00 00       	nop
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <main>:




int main(void)
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 40e:	81 e2       	ldi	r24, 0x21	; 33
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	fc 01       	movw	r30, r24
 414:	10 82       	st	Z, r1
 416:	82 e2       	ldi	r24, 0x22	; 34
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	2f ef       	ldi	r18, 0xFF	; 255
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; //lab said DDRB = xxxx 1xxx
 420:	84 e2       	ldi	r24, 0x24	; 36
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
 42a:	85 e2       	ldi	r24, 0x25	; 37
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	10 82       	st	Z, r1
	/* Replace with your application code*/
	//PWM_on();
	//set_PWM(261.63);
	mySM = 0;
 432:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mySM>
	while (1)
	{
		tickFct();
 436:	07 df       	rcall	.-498    	; 0x246 <tickFct>
	}
 438:	fe cf       	rjmp	.-4      	; 0x436 <main+0x30>

0000043a <__cmpsf2>:
 43a:	9c d0       	rcall	.+312    	; 0x574 <__fp_cmp>
 43c:	08 f4       	brcc	.+2      	; 0x440 <__cmpsf2+0x6>
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	08 95       	ret

00000442 <__divsf3>:
 442:	0c d0       	rcall	.+24     	; 0x45c <__divsf3x>
 444:	d2 c0       	rjmp	.+420    	; 0x5ea <__fp_round>
 446:	ca d0       	rcall	.+404    	; 0x5dc <__fp_pscB>
 448:	40 f0       	brcs	.+16     	; 0x45a <__divsf3+0x18>
 44a:	c1 d0       	rcall	.+386    	; 0x5ce <__fp_pscA>
 44c:	30 f0       	brcs	.+12     	; 0x45a <__divsf3+0x18>
 44e:	21 f4       	brne	.+8      	; 0x458 <__divsf3+0x16>
 450:	5f 3f       	cpi	r21, 0xFF	; 255
 452:	19 f0       	breq	.+6      	; 0x45a <__divsf3+0x18>
 454:	b3 c0       	rjmp	.+358    	; 0x5bc <__fp_inf>
 456:	51 11       	cpse	r21, r1
 458:	fc c0       	rjmp	.+504    	; 0x652 <__fp_szero>
 45a:	b6 c0       	rjmp	.+364    	; 0x5c8 <__fp_nan>

0000045c <__divsf3x>:
 45c:	d7 d0       	rcall	.+430    	; 0x60c <__fp_split3>
 45e:	98 f3       	brcs	.-26     	; 0x446 <__divsf3+0x4>

00000460 <__divsf3_pse>:
 460:	99 23       	and	r25, r25
 462:	c9 f3       	breq	.-14     	; 0x456 <__divsf3+0x14>
 464:	55 23       	and	r21, r21
 466:	b1 f3       	breq	.-20     	; 0x454 <__divsf3+0x12>
 468:	95 1b       	sub	r25, r21
 46a:	55 0b       	sbc	r21, r21
 46c:	bb 27       	eor	r27, r27
 46e:	aa 27       	eor	r26, r26
 470:	62 17       	cp	r22, r18
 472:	73 07       	cpc	r23, r19
 474:	84 07       	cpc	r24, r20
 476:	38 f0       	brcs	.+14     	; 0x486 <__divsf3_pse+0x26>
 478:	9f 5f       	subi	r25, 0xFF	; 255
 47a:	5f 4f       	sbci	r21, 0xFF	; 255
 47c:	22 0f       	add	r18, r18
 47e:	33 1f       	adc	r19, r19
 480:	44 1f       	adc	r20, r20
 482:	aa 1f       	adc	r26, r26
 484:	a9 f3       	breq	.-22     	; 0x470 <__divsf3_pse+0x10>
 486:	33 d0       	rcall	.+102    	; 0x4ee <__divsf3_pse+0x8e>
 488:	0e 2e       	mov	r0, r30
 48a:	3a f0       	brmi	.+14     	; 0x49a <__divsf3_pse+0x3a>
 48c:	e0 e8       	ldi	r30, 0x80	; 128
 48e:	30 d0       	rcall	.+96     	; 0x4f0 <__divsf3_pse+0x90>
 490:	91 50       	subi	r25, 0x01	; 1
 492:	50 40       	sbci	r21, 0x00	; 0
 494:	e6 95       	lsr	r30
 496:	00 1c       	adc	r0, r0
 498:	ca f7       	brpl	.-14     	; 0x48c <__divsf3_pse+0x2c>
 49a:	29 d0       	rcall	.+82     	; 0x4ee <__divsf3_pse+0x8e>
 49c:	fe 2f       	mov	r31, r30
 49e:	27 d0       	rcall	.+78     	; 0x4ee <__divsf3_pse+0x8e>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	bb 1f       	adc	r27, r27
 4a8:	26 17       	cp	r18, r22
 4aa:	37 07       	cpc	r19, r23
 4ac:	48 07       	cpc	r20, r24
 4ae:	ab 07       	cpc	r26, r27
 4b0:	b0 e8       	ldi	r27, 0x80	; 128
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__divsf3_pse+0x56>
 4b4:	bb 0b       	sbc	r27, r27
 4b6:	80 2d       	mov	r24, r0
 4b8:	bf 01       	movw	r22, r30
 4ba:	ff 27       	eor	r31, r31
 4bc:	93 58       	subi	r25, 0x83	; 131
 4be:	5f 4f       	sbci	r21, 0xFF	; 255
 4c0:	2a f0       	brmi	.+10     	; 0x4cc <__divsf3_pse+0x6c>
 4c2:	9e 3f       	cpi	r25, 0xFE	; 254
 4c4:	51 05       	cpc	r21, r1
 4c6:	68 f0       	brcs	.+26     	; 0x4e2 <__divsf3_pse+0x82>
 4c8:	79 c0       	rjmp	.+242    	; 0x5bc <__fp_inf>
 4ca:	c3 c0       	rjmp	.+390    	; 0x652 <__fp_szero>
 4cc:	5f 3f       	cpi	r21, 0xFF	; 255
 4ce:	ec f3       	brlt	.-6      	; 0x4ca <__divsf3_pse+0x6a>
 4d0:	98 3e       	cpi	r25, 0xE8	; 232
 4d2:	dc f3       	brlt	.-10     	; 0x4ca <__divsf3_pse+0x6a>
 4d4:	86 95       	lsr	r24
 4d6:	77 95       	ror	r23
 4d8:	67 95       	ror	r22
 4da:	b7 95       	ror	r27
 4dc:	f7 95       	ror	r31
 4de:	9f 5f       	subi	r25, 0xFF	; 255
 4e0:	c9 f7       	brne	.-14     	; 0x4d4 <__divsf3_pse+0x74>
 4e2:	88 0f       	add	r24, r24
 4e4:	91 1d       	adc	r25, r1
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret
 4ee:	e1 e0       	ldi	r30, 0x01	; 1
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	88 1f       	adc	r24, r24
 4f6:	bb 1f       	adc	r27, r27
 4f8:	62 17       	cp	r22, r18
 4fa:	73 07       	cpc	r23, r19
 4fc:	84 07       	cpc	r24, r20
 4fe:	ba 07       	cpc	r27, r26
 500:	20 f0       	brcs	.+8      	; 0x50a <__divsf3_pse+0xaa>
 502:	62 1b       	sub	r22, r18
 504:	73 0b       	sbc	r23, r19
 506:	84 0b       	sbc	r24, r20
 508:	ba 0b       	sbc	r27, r26
 50a:	ee 1f       	adc	r30, r30
 50c:	88 f7       	brcc	.-30     	; 0x4f0 <__divsf3_pse+0x90>
 50e:	e0 95       	com	r30
 510:	08 95       	ret

00000512 <__fixsfsi>:
 512:	04 d0       	rcall	.+8      	; 0x51c <__fixunssfsi>
 514:	68 94       	set
 516:	b1 11       	cpse	r27, r1
 518:	9c c0       	rjmp	.+312    	; 0x652 <__fp_szero>
 51a:	08 95       	ret

0000051c <__fixunssfsi>:
 51c:	7f d0       	rcall	.+254    	; 0x61c <__fp_splitA>
 51e:	88 f0       	brcs	.+34     	; 0x542 <__fixunssfsi+0x26>
 520:	9f 57       	subi	r25, 0x7F	; 127
 522:	90 f0       	brcs	.+36     	; 0x548 <__fixunssfsi+0x2c>
 524:	b9 2f       	mov	r27, r25
 526:	99 27       	eor	r25, r25
 528:	b7 51       	subi	r27, 0x17	; 23
 52a:	a0 f0       	brcs	.+40     	; 0x554 <__fixunssfsi+0x38>
 52c:	d1 f0       	breq	.+52     	; 0x562 <__fixunssfsi+0x46>
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	88 1f       	adc	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	1a f0       	brmi	.+6      	; 0x53e <__fixunssfsi+0x22>
 538:	ba 95       	dec	r27
 53a:	c9 f7       	brne	.-14     	; 0x52e <__fixunssfsi+0x12>
 53c:	12 c0       	rjmp	.+36     	; 0x562 <__fixunssfsi+0x46>
 53e:	b1 30       	cpi	r27, 0x01	; 1
 540:	81 f0       	breq	.+32     	; 0x562 <__fixunssfsi+0x46>
 542:	86 d0       	rcall	.+268    	; 0x650 <__fp_zero>
 544:	b1 e0       	ldi	r27, 0x01	; 1
 546:	08 95       	ret
 548:	83 c0       	rjmp	.+262    	; 0x650 <__fp_zero>
 54a:	67 2f       	mov	r22, r23
 54c:	78 2f       	mov	r23, r24
 54e:	88 27       	eor	r24, r24
 550:	b8 5f       	subi	r27, 0xF8	; 248
 552:	39 f0       	breq	.+14     	; 0x562 <__fixunssfsi+0x46>
 554:	b9 3f       	cpi	r27, 0xF9	; 249
 556:	cc f3       	brlt	.-14     	; 0x54a <__fixunssfsi+0x2e>
 558:	86 95       	lsr	r24
 55a:	77 95       	ror	r23
 55c:	67 95       	ror	r22
 55e:	b3 95       	inc	r27
 560:	d9 f7       	brne	.-10     	; 0x558 <__fixunssfsi+0x3c>
 562:	3e f4       	brtc	.+14     	; 0x572 <__fixunssfsi+0x56>
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	08 95       	ret

00000574 <__fp_cmp>:
 574:	99 0f       	add	r25, r25
 576:	00 08       	sbc	r0, r0
 578:	55 0f       	add	r21, r21
 57a:	aa 0b       	sbc	r26, r26
 57c:	e0 e8       	ldi	r30, 0x80	; 128
 57e:	fe ef       	ldi	r31, 0xFE	; 254
 580:	16 16       	cp	r1, r22
 582:	17 06       	cpc	r1, r23
 584:	e8 07       	cpc	r30, r24
 586:	f9 07       	cpc	r31, r25
 588:	c0 f0       	brcs	.+48     	; 0x5ba <__fp_cmp+0x46>
 58a:	12 16       	cp	r1, r18
 58c:	13 06       	cpc	r1, r19
 58e:	e4 07       	cpc	r30, r20
 590:	f5 07       	cpc	r31, r21
 592:	98 f0       	brcs	.+38     	; 0x5ba <__fp_cmp+0x46>
 594:	62 1b       	sub	r22, r18
 596:	73 0b       	sbc	r23, r19
 598:	84 0b       	sbc	r24, r20
 59a:	95 0b       	sbc	r25, r21
 59c:	39 f4       	brne	.+14     	; 0x5ac <__fp_cmp+0x38>
 59e:	0a 26       	eor	r0, r26
 5a0:	61 f0       	breq	.+24     	; 0x5ba <__fp_cmp+0x46>
 5a2:	23 2b       	or	r18, r19
 5a4:	24 2b       	or	r18, r20
 5a6:	25 2b       	or	r18, r21
 5a8:	21 f4       	brne	.+8      	; 0x5b2 <__fp_cmp+0x3e>
 5aa:	08 95       	ret
 5ac:	0a 26       	eor	r0, r26
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <__fp_cmp+0x3e>
 5b0:	a1 40       	sbci	r26, 0x01	; 1
 5b2:	a6 95       	lsr	r26
 5b4:	8f ef       	ldi	r24, 0xFF	; 255
 5b6:	81 1d       	adc	r24, r1
 5b8:	81 1d       	adc	r24, r1
 5ba:	08 95       	ret

000005bc <__fp_inf>:
 5bc:	97 f9       	bld	r25, 7
 5be:	9f 67       	ori	r25, 0x7F	; 127
 5c0:	80 e8       	ldi	r24, 0x80	; 128
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	08 95       	ret

000005c8 <__fp_nan>:
 5c8:	9f ef       	ldi	r25, 0xFF	; 255
 5ca:	80 ec       	ldi	r24, 0xC0	; 192
 5cc:	08 95       	ret

000005ce <__fp_pscA>:
 5ce:	00 24       	eor	r0, r0
 5d0:	0a 94       	dec	r0
 5d2:	16 16       	cp	r1, r22
 5d4:	17 06       	cpc	r1, r23
 5d6:	18 06       	cpc	r1, r24
 5d8:	09 06       	cpc	r0, r25
 5da:	08 95       	ret

000005dc <__fp_pscB>:
 5dc:	00 24       	eor	r0, r0
 5de:	0a 94       	dec	r0
 5e0:	12 16       	cp	r1, r18
 5e2:	13 06       	cpc	r1, r19
 5e4:	14 06       	cpc	r1, r20
 5e6:	05 06       	cpc	r0, r21
 5e8:	08 95       	ret

000005ea <__fp_round>:
 5ea:	09 2e       	mov	r0, r25
 5ec:	03 94       	inc	r0
 5ee:	00 0c       	add	r0, r0
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <__fp_round+0xc>
 5f2:	88 23       	and	r24, r24
 5f4:	52 f0       	brmi	.+20     	; 0x60a <__fp_round+0x20>
 5f6:	bb 0f       	add	r27, r27
 5f8:	40 f4       	brcc	.+16     	; 0x60a <__fp_round+0x20>
 5fa:	bf 2b       	or	r27, r31
 5fc:	11 f4       	brne	.+4      	; 0x602 <__fp_round+0x18>
 5fe:	60 ff       	sbrs	r22, 0
 600:	04 c0       	rjmp	.+8      	; 0x60a <__fp_round+0x20>
 602:	6f 5f       	subi	r22, 0xFF	; 255
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	8f 4f       	sbci	r24, 0xFF	; 255
 608:	9f 4f       	sbci	r25, 0xFF	; 255
 60a:	08 95       	ret

0000060c <__fp_split3>:
 60c:	57 fd       	sbrc	r21, 7
 60e:	90 58       	subi	r25, 0x80	; 128
 610:	44 0f       	add	r20, r20
 612:	55 1f       	adc	r21, r21
 614:	59 f0       	breq	.+22     	; 0x62c <__fp_splitA+0x10>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	71 f0       	breq	.+28     	; 0x636 <__fp_splitA+0x1a>
 61a:	47 95       	ror	r20

0000061c <__fp_splitA>:
 61c:	88 0f       	add	r24, r24
 61e:	97 fb       	bst	r25, 7
 620:	99 1f       	adc	r25, r25
 622:	61 f0       	breq	.+24     	; 0x63c <__fp_splitA+0x20>
 624:	9f 3f       	cpi	r25, 0xFF	; 255
 626:	79 f0       	breq	.+30     	; 0x646 <__fp_splitA+0x2a>
 628:	87 95       	ror	r24
 62a:	08 95       	ret
 62c:	12 16       	cp	r1, r18
 62e:	13 06       	cpc	r1, r19
 630:	14 06       	cpc	r1, r20
 632:	55 1f       	adc	r21, r21
 634:	f2 cf       	rjmp	.-28     	; 0x61a <__fp_split3+0xe>
 636:	46 95       	lsr	r20
 638:	f1 df       	rcall	.-30     	; 0x61c <__fp_splitA>
 63a:	08 c0       	rjmp	.+16     	; 0x64c <__fp_splitA+0x30>
 63c:	16 16       	cp	r1, r22
 63e:	17 06       	cpc	r1, r23
 640:	18 06       	cpc	r1, r24
 642:	99 1f       	adc	r25, r25
 644:	f1 cf       	rjmp	.-30     	; 0x628 <__fp_splitA+0xc>
 646:	86 95       	lsr	r24
 648:	71 05       	cpc	r23, r1
 64a:	61 05       	cpc	r22, r1
 64c:	08 94       	sec
 64e:	08 95       	ret

00000650 <__fp_zero>:
 650:	e8 94       	clt

00000652 <__fp_szero>:
 652:	bb 27       	eor	r27, r27
 654:	66 27       	eor	r22, r22
 656:	77 27       	eor	r23, r23
 658:	cb 01       	movw	r24, r22
 65a:	97 f9       	bld	r25, 7
 65c:	08 95       	ret

0000065e <__gesf2>:
 65e:	8a df       	rcall	.-236    	; 0x574 <__fp_cmp>
 660:	08 f4       	brcc	.+2      	; 0x664 <__gesf2+0x6>
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	08 95       	ret

00000666 <__mulsf3>:
 666:	0b d0       	rcall	.+22     	; 0x67e <__mulsf3x>
 668:	c0 cf       	rjmp	.-128    	; 0x5ea <__fp_round>
 66a:	b1 df       	rcall	.-158    	; 0x5ce <__fp_pscA>
 66c:	28 f0       	brcs	.+10     	; 0x678 <__mulsf3+0x12>
 66e:	b6 df       	rcall	.-148    	; 0x5dc <__fp_pscB>
 670:	18 f0       	brcs	.+6      	; 0x678 <__mulsf3+0x12>
 672:	95 23       	and	r25, r21
 674:	09 f0       	breq	.+2      	; 0x678 <__mulsf3+0x12>
 676:	a2 cf       	rjmp	.-188    	; 0x5bc <__fp_inf>
 678:	a7 cf       	rjmp	.-178    	; 0x5c8 <__fp_nan>
 67a:	11 24       	eor	r1, r1
 67c:	ea cf       	rjmp	.-44     	; 0x652 <__fp_szero>

0000067e <__mulsf3x>:
 67e:	c6 df       	rcall	.-116    	; 0x60c <__fp_split3>
 680:	a0 f3       	brcs	.-24     	; 0x66a <__mulsf3+0x4>

00000682 <__mulsf3_pse>:
 682:	95 9f       	mul	r25, r21
 684:	d1 f3       	breq	.-12     	; 0x67a <__mulsf3+0x14>
 686:	95 0f       	add	r25, r21
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	55 1f       	adc	r21, r21
 68c:	62 9f       	mul	r22, r18
 68e:	f0 01       	movw	r30, r0
 690:	72 9f       	mul	r23, r18
 692:	bb 27       	eor	r27, r27
 694:	f0 0d       	add	r31, r0
 696:	b1 1d       	adc	r27, r1
 698:	63 9f       	mul	r22, r19
 69a:	aa 27       	eor	r26, r26
 69c:	f0 0d       	add	r31, r0
 69e:	b1 1d       	adc	r27, r1
 6a0:	aa 1f       	adc	r26, r26
 6a2:	64 9f       	mul	r22, r20
 6a4:	66 27       	eor	r22, r22
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	66 1f       	adc	r22, r22
 6ac:	82 9f       	mul	r24, r18
 6ae:	22 27       	eor	r18, r18
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	62 1f       	adc	r22, r18
 6b6:	73 9f       	mul	r23, r19
 6b8:	b0 0d       	add	r27, r0
 6ba:	a1 1d       	adc	r26, r1
 6bc:	62 1f       	adc	r22, r18
 6be:	83 9f       	mul	r24, r19
 6c0:	a0 0d       	add	r26, r0
 6c2:	61 1d       	adc	r22, r1
 6c4:	22 1f       	adc	r18, r18
 6c6:	74 9f       	mul	r23, r20
 6c8:	33 27       	eor	r19, r19
 6ca:	a0 0d       	add	r26, r0
 6cc:	61 1d       	adc	r22, r1
 6ce:	23 1f       	adc	r18, r19
 6d0:	84 9f       	mul	r24, r20
 6d2:	60 0d       	add	r22, r0
 6d4:	21 1d       	adc	r18, r1
 6d6:	82 2f       	mov	r24, r18
 6d8:	76 2f       	mov	r23, r22
 6da:	6a 2f       	mov	r22, r26
 6dc:	11 24       	eor	r1, r1
 6de:	9f 57       	subi	r25, 0x7F	; 127
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	8a f0       	brmi	.+34     	; 0x706 <__mulsf3_pse+0x84>
 6e4:	e1 f0       	breq	.+56     	; 0x71e <__mulsf3_pse+0x9c>
 6e6:	88 23       	and	r24, r24
 6e8:	4a f0       	brmi	.+18     	; 0x6fc <__mulsf3_pse+0x7a>
 6ea:	ee 0f       	add	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	bb 1f       	adc	r27, r27
 6f0:	66 1f       	adc	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	91 50       	subi	r25, 0x01	; 1
 6f8:	50 40       	sbci	r21, 0x00	; 0
 6fa:	a9 f7       	brne	.-22     	; 0x6e6 <__mulsf3_pse+0x64>
 6fc:	9e 3f       	cpi	r25, 0xFE	; 254
 6fe:	51 05       	cpc	r21, r1
 700:	70 f0       	brcs	.+28     	; 0x71e <__mulsf3_pse+0x9c>
 702:	5c cf       	rjmp	.-328    	; 0x5bc <__fp_inf>
 704:	a6 cf       	rjmp	.-180    	; 0x652 <__fp_szero>
 706:	5f 3f       	cpi	r21, 0xFF	; 255
 708:	ec f3       	brlt	.-6      	; 0x704 <__mulsf3_pse+0x82>
 70a:	98 3e       	cpi	r25, 0xE8	; 232
 70c:	dc f3       	brlt	.-10     	; 0x704 <__mulsf3_pse+0x82>
 70e:	86 95       	lsr	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b7 95       	ror	r27
 716:	f7 95       	ror	r31
 718:	e7 95       	ror	r30
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	c1 f7       	brne	.-16     	; 0x70e <__mulsf3_pse+0x8c>
 71e:	fe 2b       	or	r31, r30
 720:	88 0f       	add	r24, r24
 722:	91 1d       	adc	r25, r1
 724:	96 95       	lsr	r25
 726:	87 95       	ror	r24
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret

0000072c <_exit>:
 72c:	f8 94       	cli

0000072e <__stop_program>:
 72e:	ff cf       	rjmp	.-2      	; 0x72e <__stop_program>
