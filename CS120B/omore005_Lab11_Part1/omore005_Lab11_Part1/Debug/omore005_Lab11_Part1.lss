
omore005_Lab11_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e0  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000831  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000423  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000417  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
   6:	00 00       	nop
   8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
   a:	00 00       	nop
   c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
   e:	00 00       	nop
  10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
  12:	00 00       	nop
  14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
  16:	00 00       	nop
  18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
  1e:	00 00       	nop
  20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
  22:	00 00       	nop
  24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
  26:	00 00       	nop
  28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
  2e:	00 00       	nop
  30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
  32:	00 00       	nop
  34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
  36:	00 00       	nop
  38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
  3e:	00 00       	nop
  40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
  42:	00 00       	nop
  44:	70 c0       	rjmp	.+224    	; 0x126 <__bad_interrupt>
  46:	00 00       	nop
  48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
  4e:	00 00       	nop
  50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
  52:	00 00       	nop
  54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
  56:	00 00       	nop
  58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
  5e:	00 00       	nop
  60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
  62:	00 00       	nop
  64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
  66:	00 00       	nop
  68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
  6e:	00 00       	nop
  70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
  72:	00 00       	nop
  74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
  76:	00 00       	nop
  78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
  7e:	00 00       	nop
  80:	52 c0       	rjmp	.+164    	; 0x126 <__bad_interrupt>
  82:	00 00       	nop
  84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
  86:	00 00       	nop
  88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	12 01       	movw	r2, r4
  8e:	28 01       	movw	r4, r16
  90:	28 01       	movw	r4, r16
  92:	28 01       	movw	r4, r16
  94:	28 01       	movw	r4, r16
  96:	28 01       	movw	r4, r16
  98:	28 01       	movw	r4, r16
  9a:	28 01       	movw	r4, r16
  9c:	28 01       	movw	r4, r16
  9e:	28 01       	movw	r4, r16
  a0:	28 01       	movw	r4, r16
  a2:	28 01       	movw	r4, r16
  a4:	28 01       	movw	r4, r16
  a6:	28 01       	movw	r4, r16
  a8:	28 01       	movw	r4, r16
  aa:	28 01       	movw	r4, r16
  ac:	28 01       	movw	r4, r16
  ae:	28 01       	movw	r4, r16
  b0:	28 01       	movw	r4, r16
  b2:	28 01       	movw	r4, r16
  b4:	28 01       	movw	r4, r16
  b6:	28 01       	movw	r4, r16
  b8:	28 01       	movw	r4, r16
  ba:	28 01       	movw	r4, r16
  bc:	28 01       	movw	r4, r16
  be:	28 01       	movw	r4, r16
  c0:	28 01       	movw	r4, r16
  c2:	28 01       	movw	r4, r16
  c4:	28 01       	movw	r4, r16
  c6:	28 01       	movw	r4, r16
  c8:	28 01       	movw	r4, r16
  ca:	28 01       	movw	r4, r16
  cc:	28 01       	movw	r4, r16
  ce:	28 01       	movw	r4, r16
  d0:	28 01       	movw	r4, r16
  d2:	26 01       	movw	r4, r12
  d4:	28 01       	movw	r4, r16
  d6:	28 01       	movw	r4, r16
  d8:	28 01       	movw	r4, r16
  da:	28 01       	movw	r4, r16
  dc:	28 01       	movw	r4, r16
  de:	28 01       	movw	r4, r16
  e0:	22 01       	movw	r4, r4
  e2:	28 01       	movw	r4, r16
  e4:	28 01       	movw	r4, r16
  e6:	28 01       	movw	r4, r16
  e8:	28 01       	movw	r4, r16
  ea:	28 01       	movw	r4, r16
  ec:	24 01       	movw	r4, r8
  ee:	14 01       	movw	r2, r8
  f0:	16 01       	movw	r2, r12
  f2:	18 01       	movw	r2, r16
  f4:	28 01       	movw	r4, r16
  f6:	28 01       	movw	r4, r16
  f8:	28 01       	movw	r4, r16
  fa:	28 01       	movw	r4, r16
  fc:	28 01       	movw	r4, r16
  fe:	28 01       	movw	r4, r16
 100:	28 01       	movw	r4, r16
 102:	28 01       	movw	r4, r16
 104:	28 01       	movw	r4, r16
 106:	28 01       	movw	r4, r16
 108:	28 01       	movw	r4, r16
 10a:	28 01       	movw	r4, r16
 10c:	28 01       	movw	r4, r16
 10e:	1a 01       	movw	r2, r20
 110:	1c 01       	movw	r2, r24
 112:	1e 01       	movw	r2, r28
 114:	20 01       	movw	r4, r0

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61
 122:	50 d0       	rcall	.+160    	; 0x1c4 <main>
 124:	a0 c0       	rjmp	.+320    	; 0x266 <_exit>

00000126 <__bad_interrupt>:
 126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <GetKeypadKey>:
PC1 2 4 | 5 | 6 | B
PC2 3 7 | 8 | 9 | C
PC3 4 * | 0 | # | D
*/
unsigned char GetKeypadKey() {
PORTC = 0xEF; // Enable col 4 with 0, disable others with 1’s
 128:	8f ee       	ldi	r24, 0xEF	; 239
 12a:	88 b9       	out	0x08, r24	; 8
asm("nop"); // add a delay to allow PORTC to stabilize before checking
 12c:	00 00       	nop
if (GetBit(PINC,0)==0) { return('1'); }
 12e:	30 9b       	sbis	0x06, 0	; 6
 130:	29 c0       	rjmp	.+82     	; 0x184 <GetKeypadKey+0x5c>
if (GetBit(PINC,1)==0) { return('4'); }
 132:	31 9b       	sbis	0x06, 1	; 6
 134:	29 c0       	rjmp	.+82     	; 0x188 <GetKeypadKey+0x60>
if (GetBit(PINC,2)==0) { return('7'); }
 136:	32 9b       	sbis	0x06, 2	; 6
 138:	29 c0       	rjmp	.+82     	; 0x18c <GetKeypadKey+0x64>
if (GetBit(PINC,3)==0) { return('*'); }
 13a:	33 9b       	sbis	0x06, 3	; 6
 13c:	29 c0       	rjmp	.+82     	; 0x190 <GetKeypadKey+0x68>
// Check keys in col 2
PORTC = 0xDF; // Enable col 5 with 0, disable others with 1’s
 13e:	8f ed       	ldi	r24, 0xDF	; 223
 140:	88 b9       	out	0x08, r24	; 8
asm("nop"); // add a delay to allow PORTC to stabilize before checking
 142:	00 00       	nop
if (GetBit(PINC,0)==0) { return('2'); }
 144:	30 9b       	sbis	0x06, 0	; 6
 146:	26 c0       	rjmp	.+76     	; 0x194 <GetKeypadKey+0x6c>
if (GetBit(PINC,1)==0) { return('5'); }
 148:	31 9b       	sbis	0x06, 1	; 6
 14a:	26 c0       	rjmp	.+76     	; 0x198 <GetKeypadKey+0x70>
if (GetBit(PINC,2)==0) { return('8'); }
 14c:	32 9b       	sbis	0x06, 2	; 6
 14e:	26 c0       	rjmp	.+76     	; 0x19c <GetKeypadKey+0x74>
if (GetBit(PINC,3)==0) { return('0'); }
 150:	33 9b       	sbis	0x06, 3	; 6
 152:	26 c0       	rjmp	.+76     	; 0x1a0 <GetKeypadKey+0x78>
// ... *****FINISH*****
// Check keys in col 3
PORTC = 0xBF; // Enable col 6 with 0, disable others with 1’s
 154:	8f eb       	ldi	r24, 0xBF	; 191
 156:	88 b9       	out	0x08, r24	; 8
asm("nop"); // add a delay to allow PORTC to stabilize before checking
 158:	00 00       	nop
// ... *****FINISH*****
if (GetBit(PINC,0)==0) { return('3'); }
 15a:	30 9b       	sbis	0x06, 0	; 6
 15c:	23 c0       	rjmp	.+70     	; 0x1a4 <GetKeypadKey+0x7c>
if (GetBit(PINC,1)==0) { return('6'); }
 15e:	31 9b       	sbis	0x06, 1	; 6
 160:	23 c0       	rjmp	.+70     	; 0x1a8 <GetKeypadKey+0x80>
if (GetBit(PINC,2)==0) { return('9'); }
 162:	32 9b       	sbis	0x06, 2	; 6
 164:	23 c0       	rjmp	.+70     	; 0x1ac <GetKeypadKey+0x84>
if (GetBit(PINC,3)==0) { return('#'); }
 166:	33 9b       	sbis	0x06, 3	; 6
 168:	23 c0       	rjmp	.+70     	; 0x1b0 <GetKeypadKey+0x88>
// Check keys in col 4
PORTC = 0x7F; // Enable col 6 with 0, disable others with 1’s
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	88 b9       	out	0x08, r24	; 8
asm("nop"); // add a delay to allow PORTC to stabilize before checking
 16e:	00 00       	nop

// ... *****FINISH*****
if (GetBit(PINC,0)==0) { return('A'); }
 170:	30 9b       	sbis	0x06, 0	; 6
 172:	20 c0       	rjmp	.+64     	; 0x1b4 <GetKeypadKey+0x8c>
if (GetBit(PINC,1)==0) { return('B'); }
 174:	31 9b       	sbis	0x06, 1	; 6
 176:	20 c0       	rjmp	.+64     	; 0x1b8 <GetKeypadKey+0x90>
if (GetBit(PINC,2)==0) { return('C'); }
 178:	32 9b       	sbis	0x06, 2	; 6
 17a:	20 c0       	rjmp	.+64     	; 0x1bc <GetKeypadKey+0x94>
if (GetBit(PINC,3)==0) { return('D'); }
 17c:	33 9b       	sbis	0x06, 3	; 6
 17e:	20 c0       	rjmp	.+64     	; 0x1c0 <GetKeypadKey+0x98>
return('\0'); // default value
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret
PC3 4 * | 0 | # | D
*/
unsigned char GetKeypadKey() {
PORTC = 0xEF; // Enable col 4 with 0, disable others with 1’s
asm("nop"); // add a delay to allow PORTC to stabilize before checking
if (GetBit(PINC,0)==0) { return('1'); }
 184:	81 e3       	ldi	r24, 0x31	; 49
 186:	08 95       	ret
if (GetBit(PINC,1)==0) { return('4'); }
 188:	84 e3       	ldi	r24, 0x34	; 52
 18a:	08 95       	ret
if (GetBit(PINC,2)==0) { return('7'); }
 18c:	87 e3       	ldi	r24, 0x37	; 55
 18e:	08 95       	ret
if (GetBit(PINC,3)==0) { return('*'); }
 190:	8a e2       	ldi	r24, 0x2A	; 42
 192:	08 95       	ret
// Check keys in col 2
PORTC = 0xDF; // Enable col 5 with 0, disable others with 1’s
asm("nop"); // add a delay to allow PORTC to stabilize before checking
if (GetBit(PINC,0)==0) { return('2'); }
 194:	82 e3       	ldi	r24, 0x32	; 50
 196:	08 95       	ret
if (GetBit(PINC,1)==0) { return('5'); }
 198:	85 e3       	ldi	r24, 0x35	; 53
 19a:	08 95       	ret
if (GetBit(PINC,2)==0) { return('8'); }
 19c:	88 e3       	ldi	r24, 0x38	; 56
 19e:	08 95       	ret
if (GetBit(PINC,3)==0) { return('0'); }
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	08 95       	ret
// ... *****FINISH*****
// Check keys in col 3
PORTC = 0xBF; // Enable col 6 with 0, disable others with 1’s
asm("nop"); // add a delay to allow PORTC to stabilize before checking
// ... *****FINISH*****
if (GetBit(PINC,0)==0) { return('3'); }
 1a4:	83 e3       	ldi	r24, 0x33	; 51
 1a6:	08 95       	ret
if (GetBit(PINC,1)==0) { return('6'); }
 1a8:	86 e3       	ldi	r24, 0x36	; 54
 1aa:	08 95       	ret
if (GetBit(PINC,2)==0) { return('9'); }
 1ac:	89 e3       	ldi	r24, 0x39	; 57
 1ae:	08 95       	ret
if (GetBit(PINC,3)==0) { return('#'); }
 1b0:	83 e2       	ldi	r24, 0x23	; 35
 1b2:	08 95       	ret
// Check keys in col 4
PORTC = 0x7F; // Enable col 6 with 0, disable others with 1’s
asm("nop"); // add a delay to allow PORTC to stabilize before checking

// ... *****FINISH*****
if (GetBit(PINC,0)==0) { return('A'); }
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	08 95       	ret
if (GetBit(PINC,1)==0) { return('B'); }
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	08 95       	ret
if (GetBit(PINC,2)==0) { return('C'); }
 1bc:	83 e4       	ldi	r24, 0x43	; 67
 1be:	08 95       	ret
if (GetBit(PINC,3)==0) { return('D'); }
 1c0:	84 e4       	ldi	r24, 0x44	; 68
return('\0'); // default value
}
 1c2:	08 95       	ret

000001c4 <main>:
int main(void)
{
unsigned char x;
DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	84 b9       	out	0x04, r24	; 4
 1c8:	15 b8       	out	0x05, r1	; 5
DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 1ca:	80 ef       	ldi	r24, 0xF0	; 240
 1cc:	87 b9       	out	0x07, r24	; 7
 1ce:	8f e0       	ldi	r24, 0x0F	; 15
 1d0:	88 b9       	out	0x08, r24	; 8
case 'C': PORTB = 0x0C; break;
case 'D': PORTB = 0x0D; break;
case '*': PORTB = 0x0E; break;
case '0': PORTB = 0x00; break;
case '#': PORTB = 0x0F; break;
default: PORTB = 0x1B; break; // Should never occur. Middle LEDoff.
 1d2:	0f 2e       	mov	r0, r31
 1d4:	fb e1       	ldi	r31, 0x1B	; 27
 1d6:	9f 2e       	mov	r9, r31
 1d8:	f0 2d       	mov	r31, r0
case 'B': PORTB = 0x0B; break;
case 'C': PORTB = 0x0C; break;
case 'D': PORTB = 0x0D; break;
case '*': PORTB = 0x0E; break;
case '0': PORTB = 0x00; break;
case '#': PORTB = 0x0F; break;
 1da:	0f 2e       	mov	r0, r31
 1dc:	ff e0       	ldi	r31, 0x0F	; 15
 1de:	af 2e       	mov	r10, r31
 1e0:	f0 2d       	mov	r31, r0
// . . . ***** FINISH *****
case 'A': PORTB = 0x0A; break;
case 'B': PORTB = 0x0B; break;
case 'C': PORTB = 0x0C; break;
case 'D': PORTB = 0x0D; break;
case '*': PORTB = 0x0E; break;
 1e2:	0f 2e       	mov	r0, r31
 1e4:	fe e0       	ldi	r31, 0x0E	; 14
 1e6:	bf 2e       	mov	r11, r31
 1e8:	f0 2d       	mov	r31, r0
case '3': PORTB = 0x03; break;
// . . . ***** FINISH *****
case 'A': PORTB = 0x0A; break;
case 'B': PORTB = 0x0B; break;
case 'C': PORTB = 0x0C; break;
case 'D': PORTB = 0x0D; break;
 1ea:	0f 2e       	mov	r0, r31
 1ec:	fd e0       	ldi	r31, 0x0D	; 13
 1ee:	cf 2e       	mov	r12, r31
 1f0:	f0 2d       	mov	r31, r0
case '2': PORTB = 0x02; break;
case '3': PORTB = 0x03; break;
// . . . ***** FINISH *****
case 'A': PORTB = 0x0A; break;
case 'B': PORTB = 0x0B; break;
case 'C': PORTB = 0x0C; break;
 1f2:	0f 2e       	mov	r0, r31
 1f4:	fc e0       	ldi	r31, 0x0C	; 12
 1f6:	df 2e       	mov	r13, r31
 1f8:	f0 2d       	mov	r31, r0
case '1': PORTB = 0x01; break; // hex equivalent
case '2': PORTB = 0x02; break;
case '3': PORTB = 0x03; break;
// . . . ***** FINISH *****
case 'A': PORTB = 0x0A; break;
case 'B': PORTB = 0x0B; break;
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fb e0       	ldi	r31, 0x0B	; 11
 1fe:	ef 2e       	mov	r14, r31
 200:	f0 2d       	mov	r31, r0
case '\0': PORTB = 0x1F; break; // All 5 LEDs on
case '1': PORTB = 0x01; break; // hex equivalent
case '2': PORTB = 0x02; break;
case '3': PORTB = 0x03; break;
// . . . ***** FINISH *****
case 'A': PORTB = 0x0A; break;
 202:	0f 2e       	mov	r0, r31
 204:	fa e0       	ldi	r31, 0x0A	; 10
 206:	ff 2e       	mov	r15, r31
 208:	f0 2d       	mov	r31, r0
x = GetKeypadKey();
switch (x) {
case '\0': PORTB = 0x1F; break; // All 5 LEDs on
case '1': PORTB = 0x01; break; // hex equivalent
case '2': PORTB = 0x02; break;
case '3': PORTB = 0x03; break;
 20a:	03 e0       	ldi	r16, 0x03	; 3
while(1) {
x = GetKeypadKey();
switch (x) {
case '\0': PORTB = 0x1F; break; // All 5 LEDs on
case '1': PORTB = 0x01; break; // hex equivalent
case '2': PORTB = 0x02; break;
 20c:	12 e0       	ldi	r17, 0x02	; 2
DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
while(1) {
x = GetKeypadKey();
switch (x) {
case '\0': PORTB = 0x1F; break; // All 5 LEDs on
case '1': PORTB = 0x01; break; // hex equivalent
 20e:	d1 e0       	ldi	r29, 0x01	; 1
DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
while(1) {
x = GetKeypadKey();
switch (x) {
case '\0': PORTB = 0x1F; break; // All 5 LEDs on
 210:	cf e1       	ldi	r28, 0x1F	; 31
{
unsigned char x;
DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
while(1) {
x = GetKeypadKey();
 212:	8a df       	rcall	.-236    	; 0x128 <GetKeypadKey>
switch (x) {
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	85 34       	cpi	r24, 0x45	; 69
 218:	91 05       	cpc	r25, r1
 21a:	d0 f4       	brcc	.+52     	; 0x250 <main+0x8c>
 21c:	fc 01       	movw	r30, r24
 21e:	ea 5b       	subi	r30, 0xBA	; 186
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	18 c0       	rjmp	.+48     	; 0x254 <__tablejump2__>
case '\0': PORTB = 0x1F; break; // All 5 LEDs on
 224:	c5 b9       	out	0x05, r28	; 5
 226:	f5 cf       	rjmp	.-22     	; 0x212 <main+0x4e>
case '1': PORTB = 0x01; break; // hex equivalent
 228:	d5 b9       	out	0x05, r29	; 5
 22a:	f3 cf       	rjmp	.-26     	; 0x212 <main+0x4e>
case '2': PORTB = 0x02; break;
 22c:	15 b9       	out	0x05, r17	; 5
 22e:	f1 cf       	rjmp	.-30     	; 0x212 <main+0x4e>
case '3': PORTB = 0x03; break;
 230:	05 b9       	out	0x05, r16	; 5
 232:	ef cf       	rjmp	.-34     	; 0x212 <main+0x4e>
// . . . ***** FINISH *****
case 'A': PORTB = 0x0A; break;
 234:	f5 b8       	out	0x05, r15	; 5
 236:	ed cf       	rjmp	.-38     	; 0x212 <main+0x4e>
case 'B': PORTB = 0x0B; break;
 238:	e5 b8       	out	0x05, r14	; 5
 23a:	eb cf       	rjmp	.-42     	; 0x212 <main+0x4e>
case 'C': PORTB = 0x0C; break;
 23c:	d5 b8       	out	0x05, r13	; 5
 23e:	e9 cf       	rjmp	.-46     	; 0x212 <main+0x4e>
case 'D': PORTB = 0x0D; break;
 240:	c5 b8       	out	0x05, r12	; 5
 242:	e7 cf       	rjmp	.-50     	; 0x212 <main+0x4e>
case '*': PORTB = 0x0E; break;
 244:	b5 b8       	out	0x05, r11	; 5
 246:	e5 cf       	rjmp	.-54     	; 0x212 <main+0x4e>
case '0': PORTB = 0x00; break;
 248:	15 b8       	out	0x05, r1	; 5
 24a:	e3 cf       	rjmp	.-58     	; 0x212 <main+0x4e>
case '#': PORTB = 0x0F; break;
 24c:	a5 b8       	out	0x05, r10	; 5
 24e:	e1 cf       	rjmp	.-62     	; 0x212 <main+0x4e>
default: PORTB = 0x1B; break; // Should never occur. Middle LEDoff.
 250:	95 b8       	out	0x05, r9	; 5
 252:	df cf       	rjmp	.-66     	; 0x212 <main+0x4e>

00000254 <__tablejump2__>:
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	00 24       	eor	r0, r0
 25a:	00 1c       	adc	r0, r0
 25c:	0b be       	out	0x3b, r0	; 59
 25e:	07 90       	elpm	r0, Z+
 260:	f6 91       	elpm	r31, Z
 262:	e0 2d       	mov	r30, r0
 264:	09 94       	ijmp

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
