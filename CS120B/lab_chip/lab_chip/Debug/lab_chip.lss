
lab_chip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002ce  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000956  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f6  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000219  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000209b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	ef d0       	rcall	.+478    	; 0x292 <main>
  b4:	0a c1       	rjmp	.+532    	; 0x2ca <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_ClearScreen>:
#define RS 0			// pin number of uC connected to pin 4 of LCD disp.
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	1a d0       	rcall	.+52     	; 0xf8 <LCD_WriteCommand>
}
  c4:	00 00       	nop
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <LCD_init>:

void LCD_init(void) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
  d4:	84 e6       	ldi	r24, 0x64	; 100
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	ac d0       	rcall	.+344    	; 0x232 <delay_ms>
	LCD_WriteCommand(0x38);
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	0d d0       	rcall	.+26     	; 0xf8 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	0b d0       	rcall	.+22     	; 0xf8 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	09 d0       	rcall	.+18     	; 0xf8 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	07 d0       	rcall	.+14     	; 0xf8 <LCD_WriteCommand>
	delay_ms(10);						 
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	a1 d0       	rcall	.+322    	; 0x232 <delay_ms>
  f0:	00 00       	nop
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <LCD_WriteCommand>:
  f8:	cf 93       	push	r28

void LCD_WriteCommand (unsigned char Command) {
  fa:	df 93       	push	r29
  fc:	1f 92       	push	r1
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
 104:	82 e2       	ldi	r24, 0x22	; 34
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	22 e2       	ldi	r18, 0x22	; 34
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	2e 7f       	andi	r18, 0xFE	; 254
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
   DATA_BUS = Command;
 116:	8b e2       	ldi	r24, 0x2B	; 43
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	29 81       	ldd	r18, Y+1	; 0x01
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
 120:	82 e2       	ldi	r24, 0x22	; 34
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	22 e2       	ldi	r18, 0x22	; 34
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	22 60       	ori	r18, 0x02	; 2
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
   asm("nop");
 132:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 134:	82 e2       	ldi	r24, 0x22	; 34
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	22 e2       	ldi	r18, 0x22	; 34
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	2d 7f       	andi	r18, 0xFD	; 253
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	73 d0       	rcall	.+230    	; 0x232 <delay_ms>
}
 14c:	00 00       	nop
 14e:	0f 90       	pop	r0
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	1f 92       	push	r1
 15c:	cd b7       	in	r28, 0x3d	; 61
 15e:	de b7       	in	r29, 0x3e	; 62
 160:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
 162:	82 e2       	ldi	r24, 0x22	; 34
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	22 e2       	ldi	r18, 0x22	; 34
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	21 60       	ori	r18, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
   DATA_BUS = Data;
 174:	8b e2       	ldi	r24, 0x2B	; 43
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
 17e:	82 e2       	ldi	r24, 0x22	; 34
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	22 e2       	ldi	r18, 0x22	; 34
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	22 60       	ori	r18, 0x02	; 2
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
   asm("nop");
 190:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 192:	82 e2       	ldi	r24, 0x22	; 34
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	22 e2       	ldi	r18, 0x22	; 34
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	2d 7f       	andi	r18, 0xFD	; 253
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
   delay_ms(1);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	44 d0       	rcall	.+136    	; 0x232 <delay_ms>
}
 1aa:	00 00       	nop
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <LCD_DisplayString+0x6>
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <LCD_DisplayString+0x8>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	8a 83       	std	Y+2, r24	; 0x02
 1c2:	7c 83       	std	Y+4, r23	; 0x04
 1c4:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
 1c6:	78 df       	rcall	.-272    	; 0xb8 <LCD_ClearScreen>
   unsigned char c = column;
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
 1cc:	0f c0       	rjmp	.+30     	; 0x1ec <LCD_DisplayString+0x38>
      LCD_Cursor(c++);
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	98 0f       	add	r25, r24
 1d4:	99 83       	std	Y+1, r25	; 0x01
 1d6:	18 d0       	rcall	.+48     	; 0x208 <LCD_Cursor>
      LCD_WriteData(*string++);
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	9c 81       	ldd	r25, Y+4	; 0x04
 1dc:	9c 01       	movw	r18, r24
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	3c 83       	std	Y+4, r19	; 0x04
 1e4:	2b 83       	std	Y+3, r18	; 0x03
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	b5 df       	rcall	.-150    	; 0x156 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	9c 81       	ldd	r25, Y+4	; 0x04
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	88 23       	and	r24, r24
 1f6:	59 f7       	brne	.-42     	; 0x1ce <LCD_DisplayString+0x1a>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 1f8:	00 00       	nop
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	81 31       	cpi	r24, 0x11	; 17
 218:	20 f4       	brcc	.+8      	; 0x222 <LCD_Cursor+0x1a>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	81 58       	subi	r24, 0x81	; 129
 21e:	6c df       	rcall	.-296    	; 0xf8 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
											// 16x2 LCD: column - 9
   }
}
 220:	03 c0       	rjmp	.+6      	; 0x228 <LCD_Cursor+0x20>
void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	81 55       	subi	r24, 0x51	; 81
 226:	68 df       	rcall	.-304    	; 0xf8 <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
 228:	00 00       	nop
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <delay_ms+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <delay_ms+0x8>
 23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0xa>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	9e 83       	std	Y+6, r25	; 0x06
 242:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
 244:	1a 82       	std	Y+2, r1	; 0x02
 246:	19 82       	std	Y+1, r1	; 0x01
 248:	13 c0       	rjmp	.+38     	; 0x270 <delay_ms+0x3e>
    for(j=0;j<775;j++)
 24a:	1c 82       	std	Y+4, r1	; 0x04
 24c:	1b 82       	std	Y+3, r1	; 0x03
 24e:	06 c0       	rjmp	.+12     	; 0x25c <delay_ms+0x2a>
  {
   asm("nop");
 250:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	9c 81       	ldd	r25, Y+4	; 0x04
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	9c 83       	std	Y+4, r25	; 0x04
 25a:	8b 83       	std	Y+3, r24	; 0x03
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	9c 81       	ldd	r25, Y+4	; 0x04
 260:	87 30       	cpi	r24, 0x07	; 7
 262:	93 40       	sbci	r25, 0x03	; 3
 264:	ac f3       	brlt	.-22     	; 0x250 <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	9a 83       	std	Y+2, r25	; 0x02
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	29 81       	ldd	r18, Y+1	; 0x01
 272:	3a 81       	ldd	r19, Y+2	; 0x02
 274:	8d 81       	ldd	r24, Y+5	; 0x05
 276:	9e 81       	ldd	r25, Y+6	; 0x06
 278:	28 17       	cp	r18, r24
 27a:	39 07       	cpc	r19, r25
 27c:	34 f3       	brlt	.-52     	; 0x24a <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
 27e:	00 00       	nop
 280:	26 96       	adiw	r28, 0x06	; 6
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <main>:
#include <avr/io.h>
#include <io.c>
int main(void)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF; PORTA = 0x00; // LCD data lines
 29a:	81 e2       	ldi	r24, 0x21	; 33
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
 2a4:	82 e2       	ldi	r24, 0x22	; 34
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 2ac:	8a e2       	ldi	r24, 0x2A	; 42
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
 2b6:	8b e2       	ldi	r24, 0x2B	; 43
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	10 82       	st	Z, r1
	// Initializes the LCD display
	LCD_init();
 2be:	06 df       	rcall	.-500    	; 0xcc <LCD_init>
	// Starting at position 1 on the LCD screen, writes Hello World
	LCD_DisplayString(1, "A la verga");
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	71 e0       	ldi	r23, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	76 df       	rcall	.-276    	; 0x1b4 <LCD_DisplayString>
	while(1) {continue;}
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <main+0x36>

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
