
omore005_la06_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a6  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087a  00000000  00000000  00000d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000354  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ac d0       	rcall	.+344    	; 0x21c <main>
  c4:	bd c0       	rjmp	.+378    	; 0x240 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
  ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
  f0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
  f4:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
  f8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
  fc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 100:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 104:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 126:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 12a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 12e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 13c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 140:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 144:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 15a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 15e:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 162:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 166:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 16a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 16e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 172:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 18c:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 194:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 19c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 1a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 1a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
 1a8:	08 95       	ret

000001aa <tick>:
unsigned char out = 0x01;

void tick()
{
	
	switch(state) //Transitions
 1aa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <state>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	99 f0       	breq	.+38     	; 0x1d8 <tick+0x2e>
 1b2:	28 f4       	brcc	.+10     	; 0x1be <tick+0x14>
 1b4:	88 23       	and	r24, r24
 1b6:	41 f0       	breq	.+16     	; 0x1c8 <tick+0x1e>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	51 f0       	breq	.+20     	; 0x1d0 <tick+0x26>
 1bc:	14 c0       	rjmp	.+40     	; 0x1e6 <tick+0x3c>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	11 f1       	breq	.+68     	; 0x206 <tick+0x5c>
 1c2:	84 30       	cpi	r24, 0x04	; 4
 1c4:	69 f0       	breq	.+26     	; 0x1e0 <tick+0x36>
 1c6:	0f c0       	rjmp	.+30     	; 0x1e6 <tick+0x3c>
	{
		case START: 
		state = INIT;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <tick+0x48>
		break;
		
		case INIT:		
		state = LED1;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
		break;
 1d6:	1e c0       	rjmp	.+60     	; 0x214 <tick+0x6a>
		
		case LED1:
		state = LED2;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <state>
 1de:	0d c0       	rjmp	.+26     	; 0x1fa <tick+0x50>
		case LED2:
		state = LED3;
		break;
		
		case LED3:
		state = START;
 1e0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
		break;
 1e4:	17 c0       	rjmp	.+46     	; 0x214 <tick+0x6a>
		
	}
	switch(state) //Actions
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	41 f0       	breq	.+16     	; 0x1fa <tick+0x50>
 1ea:	84 30       	cpi	r24, 0x04	; 4
 1ec:	61 f0       	breq	.+24     	; 0x206 <tick+0x5c>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f4       	brne	.+34     	; 0x214 <tick+0x6a>
	{		
		case START:
		break;
		
		case INIT:
		out = 0x01;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		//PORTB = out;
		break;
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <tick+0x6a>
		case LED1:
		//out = out << 1;
		break;
		
		case LED2:
		out = out << 1;
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fe:	88 0f       	add	r24, r24
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 204:	07 c0       	rjmp	.+14     	; 0x214 <tick+0x6a>
		
		case LED3:
		out = out << 1;
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	88 0f       	add	r24, r24
 20c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		state = START;
 210:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <state>
		break;
	}
	
	PORTB = out;
 214:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 218:	85 b9       	out	0x05, r24	; 5
 21a:	08 95       	ret

0000021c <main>:
}


void main()
{
	DDRB = 0xFF;  // Set port B to output
 21c:	cf ef       	ldi	r28, 0xFF	; 255
 21e:	c4 b9       	out	0x04, r28	; 4
	PORTB = 0x00; // Init port B to 0s
 220:	15 b8       	out	0x05, r1	; 5
	TimerSet(1000);
 222:	68 ee       	ldi	r22, 0xE8	; 232
 224:	73 e0       	ldi	r23, 0x03	; 3
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	ae df       	rcall	.-164    	; 0x188 <TimerSet>
	TimerOn();
 22c:	4d df       	rcall	.-358    	; 0xc8 <TimerOn>
	unsigned char tmpB = 0x00;
	tmpB = ~tmpB;	// Toggle PORTB; Temporary, bad programming style
	PORTB = tmpB;
 22e:	c5 b9       	out	0x05, r28	; 5
	
	while(1) {
		// User code (i.e. synchSM calls)
		//tmpB = ~tmpB;	// Toggle PORTB; Temporary, bad programming style
		//PORTB = tmpB;
		tick();
 230:	bc df       	rcall	.-136    	; 0x1aa <tick>
 232:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <TimerFlag>
		while (!TimerFlag);	// Wait 1 sec		
 236:	88 23       	and	r24, r24
 238:	e1 f3       	breq	.-8      	; 0x232 <main+0x16>
 23a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <TimerFlag>
		TimerFlag = 0;
 23e:	f8 cf       	rjmp	.-16     	; 0x230 <main+0x14>

00000240 <_exit>:
		// Note: For the above a better style would use a synchSM with TickSM()
		// This example just illustrates the use of the ISR and flag
	}
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
