
omore005_Lab10_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000023a  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800104  00800104  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a90  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089b  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cb  00000000  00000000  000016cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000072  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000020a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	89 d0       	rcall	.+274    	; 0x1d6 <main>
  c4:	b8 c0       	rjmp	.+368    	; 0x236 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_avr_timer_cntcurr>
  fc:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_avr_timer_cntcurr+0x1>
 100:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_avr_timer_cntcurr+0x2>
 104:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 110:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 114:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 118:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 11c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 120:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <_avr_timer_cntcurr>
 124:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <_avr_timer_cntcurr+0x1>
 128:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_avr_timer_cntcurr+0x2>
 12c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_avr_timer_cntcurr+0x3>
 130:	08 95       	ret

00000132 <Three_LED_Tick>:

enum threeLights{THREE_INIT,FIRST, SECOND, THIRD}threeLight;

//this transitions loop the lights
void Three_LED_Tick(){
	switch(threeLight){ // Transitions
 132:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <threeLight>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	51 f0       	breq	.+20     	; 0x14e <Three_LED_Tick+0x1c>
 13a:	28 f0       	brcs	.+10     	; 0x146 <Three_LED_Tick+0x14>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	59 f0       	breq	.+22     	; 0x156 <Three_LED_Tick+0x24>
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	69 f0       	breq	.+26     	; 0x15e <Three_LED_Tick+0x2c>
 144:	10 c0       	rjmp	.+32     	; 0x166 <Three_LED_Tick+0x34>
		case THREE_INIT:
		threeLight = FIRST;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLight>
		break;
 14c:	12 c0       	rjmp	.+36     	; 0x172 <Three_LED_Tick+0x40>
		case FIRST:
		threeLight = SECOND;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLight>
 154:	12 c0       	rjmp	.+36     	; 0x17a <Three_LED_Tick+0x48>
		break;
		case SECOND:
		threeLight = THIRD;
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLight>
 15c:	12 c0       	rjmp	.+36     	; 0x182 <Three_LED_Tick+0x50>
		break;
		case THIRD:
		threeLight = FIRST;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLight>
		break;
 164:	06 c0       	rjmp	.+12     	; 0x172 <Three_LED_Tick+0x40>
	}
	switch(threeLight){ //actions
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	41 f0       	breq	.+16     	; 0x17a <Three_LED_Tick+0x48>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	51 f0       	breq	.+20     	; 0x182 <Three_LED_Tick+0x50>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	59 f4       	brne	.+22     	; 0x188 <Three_LED_Tick+0x56>
		
		case THREE_INIT:
		break;
		case FIRST:
		LEDs = 0x01;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LEDs>
		break;
 178:	08 95       	ret
		case SECOND:
		LEDs = 0x02;
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LEDs>
		break;
 180:	08 95       	ret
		case THIRD:
		LEDs = 0x04;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LEDs>
 188:	08 95       	ret

0000018a <ONE_LED_Tick>:

//lits the led on and off
enum oneStates{ON, OFF}oneState;

void ONE_LED_Tick(){
	switch(oneState){ //Transitions
 18a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <oneState>
 18e:	88 23       	and	r24, r24
 190:	19 f0       	breq	.+6      	; 0x198 <ONE_LED_Tick+0xe>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	29 f0       	breq	.+10     	; 0x1a0 <ONE_LED_Tick+0x16>
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <ONE_LED_Tick+0x1c>
		case ON:
		oneState = OFF;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <oneState>
 19e:	0c c0       	rjmp	.+24     	; 0x1b8 <ONE_LED_Tick+0x2e>
		break;
		case OFF:
		oneState = ON;
 1a0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <oneState>
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <ONE_LED_Tick+0x26>
		break;
	}
	switch(oneState){ //Actions
 1a6:	88 23       	and	r24, r24
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <ONE_LED_Tick+0x26>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	39 f4       	brne	.+14     	; 0x1bc <ONE_LED_Tick+0x32>
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <ONE_LED_Tick+0x2e>
		case ON:
		blinkLED = 0x08;
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		break;
 1b6:	08 95       	ret
		case OFF:
		blinkLED = 0x00;
 1b8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 1bc:	08 95       	ret

000001be <OUT_Tick>:
void OUT_Tick(){
	switch(operation){ //Transitions
		case OUT:
		break;
	}
	switch(operation){ //actions
 1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <operation>
 1c2:	81 11       	cpse	r24, r1
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <OUT_Tick+0x16>
		case OUT:
		tempB = LEDs | blinkLED;
 1c6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <LEDs>
 1ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1ce:	89 2b       	or	r24, r25
 1d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <tempB>
 1d4:	08 95       	ret

000001d6 <main>:

}

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00; //initialize PORTB for Output
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	84 b9       	out	0x04, r24	; 4
 1da:	15 b8       	out	0x05, r1	; 5
	
	unsigned long period = 1000;
	unsigned long timer = 0;	
	const unsigned long smallPeriod = 300;

	TimerSet(1000);
 1dc:	68 ee       	ldi	r22, 0xE8	; 232
 1de:	73 e0       	ldi	r23, 0x03	; 3
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	95 df       	rcall	.-214    	; 0x110 <TimerSet>
	TimerOn();
 1e6:	70 df       	rcall	.-288    	; 0xc8 <TimerOn>
 1e8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <threeLight>
	
	threeLight = THREE_INIT;
 1ec:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <operation>
	operation  = OUT;
 1f0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <oneState>
	oneState   = ON;
 1f4:	c1 2c       	mov	r12, r1
int main(void)
{
	DDRB = 0xFF; PORTB = 0x00; //initialize PORTB for Output
	
	unsigned long period = 1000;
	unsigned long timer = 0;	
 1f6:	d1 2c       	mov	r13, r1
 1f8:	76 01       	movw	r14, r12
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <main+0x2e>
	 *three LEDs light for 300 ms, while PB3's LED still blinks 1
	 *second on and 1 second off.
	/************************************************************************/	
	
		if(timer >= period){
			ONE_LED_Tick();
 1fc:	c6 df       	rcall	.-116    	; 0x18a <ONE_LED_Tick>
 1fe:	c1 2c       	mov	r12, r1
			timer = 0;
 200:	d1 2c       	mov	r13, r1
	}
		Three_LED_Tick();
 202:	76 01       	movw	r14, r12
 204:	96 df       	rcall	.-212    	; 0x132 <Three_LED_Tick>
		OUT_Tick();
 206:	db df       	rcall	.-74     	; 0x1be <OUT_Tick>
 208:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <tempB>
		
		PORTB = tempB;
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TimerFlag>
		
		//timer handle
		while(!TimerFlag){}
 212:	88 23       	and	r24, r24
 214:	e1 f3       	breq	.-8      	; 0x20e <main+0x38>
 216:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TimerFlag>
		TimerFlag = 0;
 21a:	8c e2       	ldi	r24, 0x2C	; 44
		timer += smallPeriod;
 21c:	c8 0e       	add	r12, r24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	d8 1e       	adc	r13, r24
 222:	e1 1c       	adc	r14, r1
 224:	f1 1c       	adc	r15, r1
 226:	88 ee       	ldi	r24, 0xE8	; 232
	/************************************************************************
	 *three LEDs light for 300 ms, while PB3's LED still blinks 1
	 *second on and 1 second off.
	/************************************************************************/	
	
		if(timer >= period){
 228:	c8 16       	cp	r12, r24
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	d8 06       	cpc	r13, r24
 22e:	e1 04       	cpc	r14, r1
 230:	f1 04       	cpc	r15, r1
 232:	40 f3       	brcs	.-48     	; 0x204 <main+0x2e>
 234:	e3 cf       	rjmp	.-58     	; 0x1fc <main+0x26>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
