
omore005_lab03_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b0  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4e d0       	rcall	.+156    	; 0x136 <main>
  9a:	d3 c0       	rjmp	.+422    	; 0x242 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <SetBit>:
#include <avr/io.h>

// Bit-access function

//value, a bit position, and a bit value (0 or 1)
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <SetBit+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	6a 83       	std	Y+2, r22	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	88 23       	and	r24, r24
  b4:	71 f0       	breq	.+28     	; 0xd2 <SetBit+0x34>
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	28 2f       	mov	r18, r24
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SetBit+0x28>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SetBit+0x24>
  ca:	98 2f       	mov	r25, r24
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	89 2b       	or	r24, r25
  d0:	0e c0       	rjmp	.+28     	; 0xee <SetBit+0x50>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <SetBit+0x44>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <SetBit+0x40>
  e6:	98 2f       	mov	r25, r24
  e8:	90 95       	com	r25
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	89 23       	and	r24, r25
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <GetBit>:
unsigned char GetBit(unsigned char x, unsigned char k) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <GetBit+0x6>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	22 2f       	mov	r18, r18
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <GetBit+0x20>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <GetBit+0x1c>
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	99 27       	eor	r25, r25
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	89 2b       	or	r24, r25
 126:	09 f4       	brne	.+2      	; 0x12a <GetBit+0x30>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	82 2f       	mov	r24, r18
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <main>:
	if the driver's seatbelt is fastened. PC7 should light a "Fasten seatbelt" icon if a key is in the ignition, the
	driver is seated, but the belt is not fastened.
 */

int main(void)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <main+0x6>
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
   
   //initialize Inputs
   DDRA = 0x00; PORTA = 0xFF; // Configure port A's pins 0-3 as inputs
 140:	81 e2       	ldi	r24, 0x21	; 33
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	10 82       	st	Z, r1
 148:	82 e2       	ldi	r24, 0x22	; 34
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
  
   //Initialize Outputs
   DDRC = 0xFF; PORTC = 0x00; //Make PORTC pins as outputs
 152:	87 e2       	ldi	r24, 0x27	; 39
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	10 82       	st	Z, r1
   
   unsigned char tempA  = 0x00;
 164:	1a 82       	std	Y+2, r1	; 0x02
   unsigned char tempC  = 0x00;
 166:	19 82       	std	Y+1, r1	; 0x01
   
    while (1) 
    {
		tempA  = PINA & 0x0F; //initialize tempA to the value of PINA
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	8a 83       	std	Y+2, r24	; 0x02
		
		//if PINA == some hex, then setbit the needed lights in PINC
		if(tempA == 1 || tempA == 2)
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	19 f0       	breq	.+6      	; 0x180 <main+0x4a>
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	19 f4       	brne	.+6      	; 0x186 <main+0x50>
		{
			tempC = 0x60;
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	35 c0       	rjmp	.+106    	; 0x1f0 <main+0xba>
		}else if(tempA == 3 || tempA == 4){
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	19 f0       	breq	.+6      	; 0x192 <main+0x5c>
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	84 30       	cpi	r24, 0x04	; 4
 190:	19 f4       	brne	.+6      	; 0x198 <main+0x62>
			tempC = 0x70;
 192:	80 e7       	ldi	r24, 0x70	; 112
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	2c c0       	rjmp	.+88     	; 0x1f0 <main+0xba>
		}else if(tempA == 5 ||  tempA == 6){
 198:	8a 81       	ldd	r24, Y+2	; 0x02
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	19 f0       	breq	.+6      	; 0x1a4 <main+0x6e>
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	86 30       	cpi	r24, 0x06	; 6
 1a2:	19 f4       	brne	.+6      	; 0x1aa <main+0x74>
			tempC = 0x38;
 1a4:	88 e3       	ldi	r24, 0x38	; 56
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	23 c0       	rjmp	.+70     	; 0x1f0 <main+0xba>
		}else if(tempA == 7 || tempA == 8 || tempA == 9){
 1aa:	8a 81       	ldd	r24, Y+2	; 0x02
 1ac:	87 30       	cpi	r24, 0x07	; 7
 1ae:	31 f0       	breq	.+12     	; 0x1bc <main+0x86>
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	19 f0       	breq	.+6      	; 0x1bc <main+0x86>
 1b6:	8a 81       	ldd	r24, Y+2	; 0x02
 1b8:	89 30       	cpi	r24, 0x09	; 9
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <main+0x8c>
			tempC = 0x3C;
 1bc:	8c e3       	ldi	r24, 0x3C	; 60
 1be:	89 83       	std	Y+1, r24	; 0x01
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <main+0xba>
		}else if(tempA == 10 || tempA == 11 || tempA == 12){
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	8a 30       	cpi	r24, 0x0A	; 10
 1c6:	31 f0       	breq	.+12     	; 0x1d4 <main+0x9e>
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	8b 30       	cpi	r24, 0x0B	; 11
 1cc:	19 f0       	breq	.+6      	; 0x1d4 <main+0x9e>
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	8c 30       	cpi	r24, 0x0C	; 12
 1d2:	19 f4       	brne	.+6      	; 0x1da <main+0xa4>
			tempC = 0x3E;
 1d4:	8e e3       	ldi	r24, 0x3E	; 62
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <main+0xba>
		}else if(tempA == 13 || tempA == 14 || tempA == 15){
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	8d 30       	cpi	r24, 0x0D	; 13
 1de:	31 f0       	breq	.+12     	; 0x1ec <main+0xb6>
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	8e 30       	cpi	r24, 0x0E	; 14
 1e4:	19 f0       	breq	.+6      	; 0x1ec <main+0xb6>
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	8f 30       	cpi	r24, 0x0F	; 15
 1ea:	11 f4       	brne	.+4      	; 0x1f0 <main+0xba>
			tempC = 0x3F;
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	89 83       	std	Y+1, r24	; 0x01
		}
		
		if(GetBit(PINA,4) == 1 && GetBit(PINA,5) == 1 && GetBit(PINA,6) == 0){
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	80 81       	ld	r24, Z
 1f8:	64 e0       	ldi	r22, 0x04	; 4
 1fa:	7f df       	rcall	.-258    	; 0xfa <GetBit>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	b1 f4       	brne	.+44     	; 0x22c <main+0xf6>
 200:	80 e2       	ldi	r24, 0x20	; 32
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fc 01       	movw	r30, r24
 206:	80 81       	ld	r24, Z
 208:	65 e0       	ldi	r22, 0x05	; 5
 20a:	77 df       	rcall	.-274    	; 0xfa <GetBit>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	71 f4       	brne	.+28     	; 0x22c <main+0xf6>
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	80 81       	ld	r24, Z
 218:	66 e0       	ldi	r22, 0x06	; 6
 21a:	6f df       	rcall	.-290    	; 0xfa <GetBit>
 21c:	88 23       	and	r24, r24
 21e:	31 f4       	brne	.+12     	; 0x22c <main+0xf6>
			//value, a bit position, and a bit value (0 or 1)			
			tempC = SetBit(tempA,7,1);
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	67 e0       	ldi	r22, 0x07	; 7
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	3b df       	rcall	.-394    	; 0x9e <SetBit>
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	05 c0       	rjmp	.+10     	; 0x236 <main+0x100>
		}
		else
		{
			tempC = SetBit(tempA,7,0);
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	35 df       	rcall	.-406    	; 0x9e <SetBit>
 234:	89 83       	std	Y+1, r24	; 0x01
 236:	88 e2       	ldi	r24, 0x28	; 40
		}
	PORTC = tempC;
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	93 cf       	rjmp	.-218    	; 0x168 <main+0x32>

00000242 <_exit>:
	
	}//end of the while
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
