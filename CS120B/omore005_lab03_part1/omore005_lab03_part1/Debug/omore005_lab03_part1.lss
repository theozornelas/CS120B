
omore005_lab03_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c2  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  00000b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	20 d0       	rcall	.+64     	; 0xda <main>
  9a:	64 c0       	rjmp	.+200    	; 0x164 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GetBit>:

// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <GetBit+0x6>
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	89 83       	std	Y+1, r24	; 0x01
  aa:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	88 2f       	mov	r24, r24
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	2a 81       	ldd	r18, Y+2	; 0x02
  b4:	22 2f       	mov	r18, r18
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <GetBit+0x20>
  ba:	95 95       	asr	r25
  bc:	87 95       	ror	r24
  be:	2a 95       	dec	r18
  c0:	e2 f7       	brpl	.-8      	; 0xba <GetBit+0x1c>
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	99 27       	eor	r25, r25
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	89 2b       	or	r24, r25
  ca:	09 f4       	brne	.+2      	; 0xce <GetBit+0x30>
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	82 2f       	mov	r24, r18
}
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:
/*
 * Prompt: Count the number of 1s on ports A and B 
 *         and output that number on port C.
 */
int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
	//initialize Inputs
    DDRA = 0x00; PORTA = 0xFF; // Configure port A's pins 0-3 as inputs
  e4:	81 e2       	ldi	r24, 0x21	; 33
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	10 82       	st	Z, r1
  ec:	82 e2       	ldi	r24, 0x22	; 34
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF; // Configure port B's pins 0-3 as inputs
  f6:	84 e2       	ldi	r24, 0x24	; 36
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	10 82       	st	Z, r1
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	
	//Initialize Outputs
    DDRC = 0xFF; PORTC = 0x00; //Make PORTC pins as outputs
 108:	87 e2       	ldi	r24, 0x27	; 39
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	10 82       	st	Z, r1
	
	while(1)
	{
		unsigned char bitCounter = 0; //counter for the num of active bits
 11a:	19 82       	std	Y+1, r1	; 0x01
		
		for(unsigned char i = 0; i<8; ++i)
 11c:	1a 82       	std	Y+2, r1	; 0x02
 11e:	19 c0       	rjmp	.+50     	; 0x152 <main+0x78>
		{
			//check if ant of the ports have active bits
			if(GetBit(PINA,i) == 1)
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	80 81       	ld	r24, Z
 128:	6a 81       	ldd	r22, Y+2	; 0x02
 12a:	b9 df       	rcall	.-142    	; 0x9e <GetBit>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	19 f4       	brne	.+6      	; 0x136 <main+0x5c>
			{
				++bitCounter; //if so increase counter
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	89 83       	std	Y+1, r24	; 0x01
			}
			if(GetBit(PINB,i) == 1)
 136:	83 e2       	ldi	r24, 0x23	; 35
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	fc 01       	movw	r30, r24
 13c:	80 81       	ld	r24, Z
 13e:	6a 81       	ldd	r22, Y+2	; 0x02
 140:	ae df       	rcall	.-164    	; 0x9e <GetBit>
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <main+0x72>
			{
				++bitCounter;			
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		unsigned char bitCounter = 0; //counter for the num of active bits
		
		for(unsigned char i = 0; i<8; ++i)
 14c:	8a 81       	ldd	r24, Y+2	; 0x02
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	8a 83       	std	Y+2, r24	; 0x02
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	20 f3       	brcs	.-56     	; 0x120 <main+0x46>
			{
				++bitCounter;			
			}
		}//end of for
			
		PORTC = bitCounter; //assign value to PORTC
 158:	88 e2       	ldi	r24, 0x28	; 40
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	29 81       	ldd	r18, Y+1	; 0x01
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
		
	}//end of the while
 162:	db cf       	rjmp	.-74     	; 0x11a <main+0x40>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
