
omore005_Lab03_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b2  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c8  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000400  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e8  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	2f c0       	rjmp	.+94     	; 0xfa <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
   
   //initialize Inputs
   DDRA = 0x00; PORTA = 0xFF; // Configure port A's pins 0-3 as inputs
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
  
   //Initialize Outputs
   DDRB = 0xFF; PORTB = 0x00; //Make PORTC pins as outputs
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	15 b8       	out	0x05, r1	; 5
   
   unsigned char tempA  = 0x00;
   unsigned char tempC  = 0x00;
  a8:	20 e0       	ldi	r18, 0x00	; 0
		tempA  = ~(PINA); //initialize tempA to the value of PINA
		
		//if PINA == some hex, then setbit the needed lights in PINC
		if(tempA == 1 || tempA == 2)
		{
			tempC = 0x60;
  aa:	30 e6       	ldi	r19, 0x60	; 96
		}else if(tempA == 3 || tempA == 4){
			tempC = 0x70;
  ac:	40 e7       	ldi	r20, 0x70	; 112
   unsigned char tempA  = 0x00;
   unsigned char tempC  = 0x00;
   
    while (1) 
    {
		tempA  = ~(PINA); //initialize tempA to the value of PINA
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
		
		//if PINA == some hex, then setbit the needed lights in PINC
		if(tempA == 1 || tempA == 2)
  b2:	9f ef       	ldi	r25, 0xFF	; 255
  b4:	98 0f       	add	r25, r24
  b6:	92 30       	cpi	r25, 0x02	; 2
  b8:	a8 f0       	brcs	.+42     	; 0xe4 <main+0x46>
		{
			tempC = 0x60;
		}else if(tempA == 3 || tempA == 4){
  ba:	9d ef       	ldi	r25, 0xFD	; 253
  bc:	98 0f       	add	r25, r24
  be:	92 30       	cpi	r25, 0x02	; 2
  c0:	98 f0       	brcs	.+38     	; 0xe8 <main+0x4a>
			tempC = 0x70;
		}else if(tempA == 5 ||  tempA == 6){
  c2:	9b ef       	ldi	r25, 0xFB	; 251
  c4:	98 0f       	add	r25, r24
  c6:	92 30       	cpi	r25, 0x02	; 2
  c8:	88 f0       	brcs	.+34     	; 0xec <main+0x4e>
			tempC = 0x38;
		}else if(tempA == 7 || tempA == 8 || tempA == 9){
  ca:	99 ef       	ldi	r25, 0xF9	; 249
  cc:	98 0f       	add	r25, r24
  ce:	93 30       	cpi	r25, 0x03	; 3
  d0:	78 f0       	brcs	.+30     	; 0xf0 <main+0x52>
			tempC = 0x3C;
		}else if(tempA == 10 || tempA == 11 || tempA == 12){
  d2:	96 ef       	ldi	r25, 0xF6	; 246
  d4:	98 0f       	add	r25, r24
  d6:	93 30       	cpi	r25, 0x03	; 3
  d8:	68 f0       	brcs	.+26     	; 0xf4 <main+0x56>
			tempC = 0x3E;
		}else if(tempA == 13 || tempA == 14 || tempA == 15){
  da:	8d 50       	subi	r24, 0x0D	; 13
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	58 f4       	brcc	.+22     	; 0xf6 <main+0x58>
			tempC = 0x3F;
  e0:	2f e3       	ldi	r18, 0x3F	; 63
  e2:	09 c0       	rjmp	.+18     	; 0xf6 <main+0x58>
		tempA  = ~(PINA); //initialize tempA to the value of PINA
		
		//if PINA == some hex, then setbit the needed lights in PINC
		if(tempA == 1 || tempA == 2)
		{
			tempC = 0x60;
  e4:	23 2f       	mov	r18, r19
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <main+0x58>
		}else if(tempA == 3 || tempA == 4){
			tempC = 0x70;
  e8:	24 2f       	mov	r18, r20
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <main+0x58>
		}else if(tempA == 5 ||  tempA == 6){
			tempC = 0x38;
  ec:	28 e3       	ldi	r18, 0x38	; 56
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x58>
		}else if(tempA == 7 || tempA == 8 || tempA == 9){
			tempC = 0x3C;
  f0:	2c e3       	ldi	r18, 0x3C	; 60
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <main+0x58>
		}else if(tempA == 10 || tempA == 11 || tempA == 12){
			tempC = 0x3E;
  f4:	2e e3       	ldi	r18, 0x3E	; 62
			tempC = 0x3F;
		}//}else{
		//	tempC = 0x00;	
		//}
    
	PORTB = tempC;
  f6:	25 b9       	out	0x05, r18	; 5
	
	}//end of the while
  f8:	da cf       	rjmp	.-76     	; 0xae <main+0x10>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
