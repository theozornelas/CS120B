
lab9_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000718  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  0000078c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b45  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000864  00000000  00000000  00001389  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000517  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008d  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000026e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fb 00       	.word	0x00fb	; ????
  8e:	0f 01       	movw	r0, r30
  90:	1b 01       	movw	r2, r22
  92:	2e 01       	movw	r4, r28
  94:	41 01       	movw	r8, r2
  96:	54 01       	movw	r10, r8
  98:	67 01       	movw	r12, r14
  9a:	7a 01       	movw	r14, r20
  9c:	8d 01       	movw	r16, r26
  9e:	ff 00       	.word	0x00ff	; ????
  a0:	07 01       	movw	r0, r14
  a2:	a6 01       	movw	r20, r12
  a4:	ac 01       	movw	r20, r24
  a6:	b2 01       	movw	r22, r4
  a8:	b8 01       	movw	r22, r16
  aa:	be 01       	movw	r22, r28
  ac:	c4 01       	movw	r24, r8
  ae:	ca 01       	movw	r24, r20
  b0:	d0 01       	movw	r26, r0

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	d0 e4       	ldi	r29, 0x40	; 64
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ab 30       	cpi	r26, 0x0B	; 11
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	98 d1       	rcall	.+816    	; 0x400 <main>
  d0:	21 c3       	rjmp	.+1602   	; 0x714 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <set_PWM>:
unsigned char up_step = 0;
unsigned char power = 0;

unsigned char prev_state = 0;

void set_PWM(double frequency) {
  d4:	cf 92       	push	r12
  d6:	df 92       	push	r13
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	6b 01       	movw	r12, r22
  de:	7c 01       	movw	r14, r24

	// Will only update the registers when the frequency changes, otherwise allows

	// music to play uninterrupted.

	if (frequency != current_frequency) {
  e0:	9b 01       	movw	r18, r22
  e2:	ac 01       	movw	r20, r24
  e4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
  e8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
  ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
  f0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
  f4:	8d d1       	rcall	.+794    	; 0x410 <__cmpsf2>
  f6:	88 23       	and	r24, r24
  f8:	09 f4       	brne	.+2      	; 0xfc <set_PWM+0x28>
  fa:	52 c0       	rjmp	.+164    	; 0x1a0 <set_PWM+0xcc>

		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	a9 01       	movw	r20, r18
 102:	c7 01       	movw	r24, r14
 104:	b6 01       	movw	r22, r12
 106:	84 d1       	rcall	.+776    	; 0x410 <__cmpsf2>
 108:	81 11       	cpse	r24, r1
 10a:	06 c0       	rjmp	.+12     	; 0x118 <set_PWM+0x44>
 10c:	e1 e9       	ldi	r30, 0x91	; 145
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 70       	andi	r24, 0x08	; 8
 114:	80 83       	st	Z, r24
 116:	05 c0       	rjmp	.+10     	; 0x122 <set_PWM+0x4e>

		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
 118:	e1 e9       	ldi	r30, 0x91	; 145
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	83 60       	ori	r24, 0x03	; 3
 120:	80 83       	st	Z, r24

		// prevents OCR3A from overflowing, using prescaler 64

		// 0.954 is smallest frequency that will not result in overflow

		if (frequency < 0.954) { OCR3A = 0xFFFF; }
 122:	28 e5       	ldi	r18, 0x58	; 88
 124:	39 e3       	ldi	r19, 0x39	; 57
 126:	44 e7       	ldi	r20, 0x74	; 116
 128:	5f e3       	ldi	r21, 0x3F	; 63
 12a:	c7 01       	movw	r24, r14
 12c:	b6 01       	movw	r22, r12
 12e:	70 d1       	rcall	.+736    	; 0x410 <__cmpsf2>
 130:	88 23       	and	r24, r24
 132:	3c f4       	brge	.+14     	; 0x142 <set_PWM+0x6e>
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 13c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 140:	23 c0       	rjmp	.+70     	; 0x188 <set_PWM+0xb4>

		

		// prevents OCR0A from underflowing, using prescaler 64     // 31250 is largest frequency that will not result in underflow

		else if (frequency > 31250) { OCR3A = 0x0000; }
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	34 e2       	ldi	r19, 0x24	; 36
 146:	44 ef       	ldi	r20, 0xF4	; 244
 148:	56 e4       	ldi	r21, 0x46	; 70
 14a:	c7 01       	movw	r24, r14
 14c:	b6 01       	movw	r22, r12
 14e:	72 d2       	rcall	.+1252   	; 0x634 <__gesf2>
 150:	18 16       	cp	r1, r24
 152:	2c f4       	brge	.+10     	; 0x15e <set_PWM+0x8a>
 154:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 158:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 15c:	15 c0       	rjmp	.+42     	; 0x188 <set_PWM+0xb4>

		

		// set OCR3A based on desired frequency

		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	53 e4       	ldi	r21, 0x43	; 67
 166:	c7 01       	movw	r24, r14
 168:	b6 01       	movw	r22, r12
 16a:	68 d2       	rcall	.+1232   	; 0x63c <__mulsf3>
 16c:	9b 01       	movw	r18, r22
 16e:	ac 01       	movw	r20, r24
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	74 e2       	ldi	r23, 0x24	; 36
 174:	84 ef       	ldi	r24, 0xF4	; 244
 176:	9a e4       	ldi	r25, 0x4A	; 74
 178:	4f d1       	rcall	.+670    	; 0x418 <__divsf3>
 17a:	b6 d1       	rcall	.+876    	; 0x4e8 <__fixsfsi>
 17c:	61 50       	subi	r22, 0x01	; 1
 17e:	71 09       	sbc	r23, r1
 180:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 184:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		

		TCNT3 = 0; // resets counter
 188:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 18c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>

		current_frequency = frequency; // Updates the current frequency
 190:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
 194:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <_edata+0x1>
 198:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <_edata+0x2>
 19c:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <_edata+0x3>

	}

}
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	08 95       	ret

000001aa <PWM_on>:



void PWM_on() {

	TCCR3A = (1 << COM3A0);
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>

	// COM3A0: Toggle PB3 on compare match between counter and OCR0A

	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
 1b0:	8b e0       	ldi	r24, 0x0B	; 11
 1b2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>

	// WGM02: When counter (TCNT0) matches OCR0A, reset counter

	// CS01 & CS30: Set a prescaler of 64

	set_PWM(0);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	cb 01       	movw	r24, r22
 1bc:	8b cf       	rjmp	.-234    	; 0xd4 <set_PWM>
 1be:	08 95       	ret

000001c0 <PWM_off>:



void PWM_off() {

	TCCR3A = 0x00;
 1c0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>

	TCCR3B = 0x00;
 1c4:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1c8:	08 95       	ret

000001ca <tickFct>:




void tickFct() {
	down_step = (~PINA) & 0x02;
 1ca:	80 b1       	in	r24, 0x00	; 0
 1cc:	80 95       	com	r24
 1ce:	82 70       	andi	r24, 0x02	; 2
 1d0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <down_step>
	up_step = (~PINA) & 0x04;
 1d4:	90 b1       	in	r25, 0x00	; 0
 1d6:	90 95       	com	r25
 1d8:	94 70       	andi	r25, 0x04	; 4
 1da:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <up_step>
	switch (mySM) {
 1de:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <mySM>
 1e2:	42 2f       	mov	r20, r18
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	4b 30       	cpi	r20, 0x0B	; 11
 1e8:	51 05       	cpc	r21, r1
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <tickFct+0x24>
 1ec:	a0 c0       	rjmp	.+320    	; 0x32e <tickFct+0x164>
 1ee:	fa 01       	movw	r30, r20
 1f0:	ea 5b       	subi	r30, 0xBA	; 186
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	86 c2       	rjmp	.+1292   	; 0x702 <__tablejump2__>
		case SM_Start:
		mySM = SM_C4;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
		break;
 1fc:	a7 c0       	rjmp	.+334    	; 0x34c <tickFct+0x182>
		case INC: mySM = up_step ? INC : prev_state + 1;
 1fe:	91 11       	cpse	r25, r1
 200:	03 c0       	rjmp	.+6      	; 0x208 <tickFct+0x3e>
 202:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <prev_state>
 206:	2f 5f       	subi	r18, 0xFF	; 255
 208:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <mySM>
		break;
 20c:	93 c0       	rjmp	.+294    	; 0x334 <tickFct+0x16a>
		case DEC: mySM = down_step ? DEC : prev_state - 1;
 20e:	81 11       	cpse	r24, r1
 210:	03 c0       	rjmp	.+6      	; 0x218 <tickFct+0x4e>
 212:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <prev_state>
 216:	21 50       	subi	r18, 0x01	; 1
 218:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <mySM>
		break;
 21c:	8b c0       	rjmp	.+278    	; 0x334 <tickFct+0x16a>
		case SM_C4:
		if (down_step) {
 21e:	81 11       	cpse	r24, r1
 220:	95 c0       	rjmp	.+298    	; 0x34c <tickFct+0x182>
			mySM = SM_C4;
			} else if (up_step) {
 222:	99 23       	and	r25, r25
 224:	09 f4       	brne	.+2      	; 0x228 <tickFct+0x5e>
 226:	92 c0       	rjmp	.+292    	; 0x34c <tickFct+0x182>
			prev_state = mySM;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = INC;
 22e:	89 e0       	ldi	r24, 0x09	; 9
 230:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 234:	08 95       	ret
		}
		break;
		case SM_D4:
		if (down_step) {
 236:	88 23       	and	r24, r24
 238:	39 f0       	breq	.+14     	; 0x248 <tickFct+0x7e>
			prev_state = mySM;
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = DEC;
 240:	8a e0       	ldi	r24, 0x0A	; 10
 242:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 246:	08 95       	ret
			} else if (up_step) {
 248:	99 23       	and	r25, r25
 24a:	09 f4       	brne	.+2      	; 0x24e <tickFct+0x84>
 24c:	85 c0       	rjmp	.+266    	; 0x358 <tickFct+0x18e>
			prev_state = mySM;
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = INC;
 254:	89 e0       	ldi	r24, 0x09	; 9
 256:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 25a:	08 95       	ret
		}
		break;
		case SM_E4:
		if (down_step) {
 25c:	88 23       	and	r24, r24
 25e:	39 f0       	breq	.+14     	; 0x26e <tickFct+0xa4>
			prev_state = mySM;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = DEC;
 266:	8a e0       	ldi	r24, 0x0A	; 10
 268:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 26c:	08 95       	ret
			} else if (up_step) {
 26e:	99 23       	and	r25, r25
 270:	09 f4       	brne	.+2      	; 0x274 <tickFct+0xaa>
 272:	78 c0       	rjmp	.+240    	; 0x364 <tickFct+0x19a>
			prev_state = mySM;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = INC;
 27a:	89 e0       	ldi	r24, 0x09	; 9
 27c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 280:	08 95       	ret
		}
		break;
		case SM_F4:
		if (down_step) {
 282:	88 23       	and	r24, r24
 284:	39 f0       	breq	.+14     	; 0x294 <tickFct+0xca>
			prev_state = mySM;
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = DEC;
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 292:	08 95       	ret
			} else if (up_step) {
 294:	99 23       	and	r25, r25
 296:	09 f4       	brne	.+2      	; 0x29a <tickFct+0xd0>
 298:	6b c0       	rjmp	.+214    	; 0x370 <tickFct+0x1a6>
			prev_state = mySM;
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = INC;
 2a0:	89 e0       	ldi	r24, 0x09	; 9
 2a2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 2a6:	08 95       	ret
		}
		break;
		case SM_G4:
		if (down_step) {
 2a8:	88 23       	and	r24, r24
 2aa:	39 f0       	breq	.+14     	; 0x2ba <tickFct+0xf0>
			prev_state = mySM;
 2ac:	85 e0       	ldi	r24, 0x05	; 5
 2ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = DEC;
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 2b8:	08 95       	ret
			} else if (up_step) {
 2ba:	99 23       	and	r25, r25
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <tickFct+0xf6>
 2be:	5e c0       	rjmp	.+188    	; 0x37c <tickFct+0x1b2>
			prev_state = mySM;
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = INC;
 2c6:	89 e0       	ldi	r24, 0x09	; 9
 2c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 2cc:	08 95       	ret
		}
		break;
		case SM_A4:
		if (down_step) {
 2ce:	88 23       	and	r24, r24
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <tickFct+0x116>
			prev_state = mySM;
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = DEC;
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 2de:	08 95       	ret
			} else if (up_step) {
 2e0:	99 23       	and	r25, r25
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <tickFct+0x11c>
 2e4:	51 c0       	rjmp	.+162    	; 0x388 <tickFct+0x1be>
			prev_state = mySM;
 2e6:	86 e0       	ldi	r24, 0x06	; 6
 2e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = INC;
 2ec:	89 e0       	ldi	r24, 0x09	; 9
 2ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 2f2:	08 95       	ret
		}
		break;
		case SM_B4:
		if (down_step) {
 2f4:	88 23       	and	r24, r24
 2f6:	39 f0       	breq	.+14     	; 0x306 <tickFct+0x13c>
			prev_state = mySM;
 2f8:	87 e0       	ldi	r24, 0x07	; 7
 2fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = DEC;
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 304:	08 95       	ret
			} else if (up_step) {
 306:	99 23       	and	r25, r25
 308:	09 f4       	brne	.+2      	; 0x30c <tickFct+0x142>
 30a:	44 c0       	rjmp	.+136    	; 0x394 <tickFct+0x1ca>
			prev_state = mySM;
 30c:	87 e0       	ldi	r24, 0x07	; 7
 30e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = INC;
 312:	89 e0       	ldi	r24, 0x09	; 9
 314:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 318:	08 95       	ret
		}
		break;
		case SM_C5:
		if (down_step) {
 31a:	88 23       	and	r24, r24
 31c:	09 f4       	brne	.+2      	; 0x320 <tickFct+0x156>
 31e:	40 c0       	rjmp	.+128    	; 0x3a0 <tickFct+0x1d6>
			prev_state = mySM;
 320:	88 e0       	ldi	r24, 0x08	; 8
 322:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <prev_state>
			mySM = DEC;
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <mySM>
 32c:	08 95       	ret
			} else if (up_step) {
			mySM = SM_C5;
		}
		break;
		default:
		mySM = SM_Start;
 32e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <mySM>
 332:	08 95       	ret
	}
	switch (mySM) {
 334:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <mySM>
 338:	8e 2f       	mov	r24, r30
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	e8 30       	cpi	r30, 0x08	; 8
 342:	f1 05       	cpc	r31, r1
 344:	90 f5       	brcc	.+100    	; 0x3aa <tickFct+0x1e0>
 346:	ef 5a       	subi	r30, 0xAF	; 175
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	db c1       	rjmp	.+950    	; 0x702 <__tablejump2__>
		case SM_C4:
		set_PWM(261.63);
 34c:	64 ea       	ldi	r22, 0xA4	; 164
 34e:	70 ed       	ldi	r23, 0xD0	; 208
 350:	82 e8       	ldi	r24, 0x82	; 130
 352:	93 e4       	ldi	r25, 0x43	; 67
 354:	bf ce       	rjmp	.-642    	; 0xd4 <set_PWM>
		break;
 356:	08 95       	ret
		case SM_D4:
		set_PWM(293.66);
 358:	6b e7       	ldi	r22, 0x7B	; 123
 35a:	74 ed       	ldi	r23, 0xD4	; 212
 35c:	82 e9       	ldi	r24, 0x92	; 146
 35e:	93 e4       	ldi	r25, 0x43	; 67
 360:	b9 ce       	rjmp	.-654    	; 0xd4 <set_PWM>
		break;
 362:	08 95       	ret
		case SM_E4:
		set_PWM(329.63);
 364:	64 ea       	ldi	r22, 0xA4	; 164
 366:	70 ed       	ldi	r23, 0xD0	; 208
 368:	84 ea       	ldi	r24, 0xA4	; 164
 36a:	93 e4       	ldi	r25, 0x43	; 67
 36c:	b3 ce       	rjmp	.-666    	; 0xd4 <set_PWM>
		break;
		case SM_F4:
		set_PWM(349.23);
 36e:	08 95       	ret
 370:	61 e7       	ldi	r22, 0x71	; 113
 372:	7d e9       	ldi	r23, 0x9D	; 157
 374:	8e ea       	ldi	r24, 0xAE	; 174
 376:	93 e4       	ldi	r25, 0x43	; 67
		break;
 378:	ad ce       	rjmp	.-678    	; 0xd4 <set_PWM>
		case SM_G4:
		set_PWM(392.00);
 37a:	08 95       	ret
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	84 ec       	ldi	r24, 0xC4	; 196
 382:	93 e4       	ldi	r25, 0x43	; 67
		break;
 384:	a7 ce       	rjmp	.-690    	; 0xd4 <set_PWM>
		case SM_A4:
		set_PWM(440.00);
 386:	08 95       	ret
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	8c ed       	ldi	r24, 0xDC	; 220
 38e:	93 e4       	ldi	r25, 0x43	; 67
		break;
 390:	a1 ce       	rjmp	.-702    	; 0xd4 <set_PWM>
		case SM_B4:
		set_PWM(493.88);
 392:	08 95       	ret
 394:	64 ea       	ldi	r22, 0xA4	; 164
 396:	70 ef       	ldi	r23, 0xF0	; 240
 398:	86 ef       	ldi	r24, 0xF6	; 246
 39a:	93 e4       	ldi	r25, 0x43	; 67
		break;
 39c:	9b ce       	rjmp	.-714    	; 0xd4 <set_PWM>
		case SM_C5:
		set_PWM(523.25);
 39e:	08 95       	ret
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	70 ed       	ldi	r23, 0xD0	; 208
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	94 e4       	ldi	r25, 0x44	; 68
 3a8:	95 ce       	rjmp	.-726    	; 0xd4 <set_PWM>
 3aa:	08 95       	ret

000003ac <tickFct_2>:
		break;
	}
}

tickFct_2() {
	power = (~PINA) & 0x01;
 3ac:	90 b1       	in	r25, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	39 2f       	mov	r19, r25
 3b2:	31 70       	andi	r19, 0x01	; 1
 3b4:	90 fd       	sbrc	r25, 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <power>
	switch (SM_toggleSwitch) {
 3bc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <SM_toggleSwitch>
 3c0:	99 23       	and	r25, r25
 3c2:	19 f0       	breq	.+6      	; 0x3ca <tickFct_2+0x1e>
 3c4:	91 30       	cpi	r25, 0x01	; 1
 3c6:	39 f0       	breq	.+14     	; 0x3d6 <tickFct_2+0x2a>
 3c8:	0b c0       	rjmp	.+22     	; 0x3e0 <tickFct_2+0x34>
		case SM_wait:
		if (power) {
 3ca:	31 11       	cpse	r19, r1
 3cc:	18 c0       	rjmp	.+48     	; 0x3fe <tickFct_2+0x52>
			SM_toggleSwitch = SM_toggle;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <SM_toggleSwitch>
 3d4:	08 c0       	rjmp	.+16     	; 0x3e6 <tickFct_2+0x3a>
		}
		break;
		case SM_toggle:
		SM_toggleSwitch = power ? SM_toggleSwitch : SM_wait;
 3d6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <SM_toggleSwitch>
		break;
		default:
		SM_toggleSwitch = SM_wait;
		break;
	}
	switch (SM_toggleSwitch) {
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	21 f0       	breq	.+8      	; 0x3e6 <tickFct_2+0x3a>
 3de:	08 95       	ret
		break;
		case SM_toggle:
		SM_toggleSwitch = power ? SM_toggleSwitch : SM_wait;
		break;
		default:
		SM_toggleSwitch = SM_wait;
 3e0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <SM_toggleSwitch>
		break;
 3e4:	08 95       	ret
	switch (SM_toggleSwitch) {
		case SM_wait:
		//do nothing
		break;
		case SM_toggle:
		if (myBool) {
 3e6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <myBool>
 3ea:	88 23       	and	r24, r24
 3ec:	21 f0       	breq	.+8      	; 0x3f6 <tickFct_2+0x4a>
			myBool = false;
 3ee:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <myBool>
			PWM_off();
 3f2:	e6 ce       	rjmp	.-564    	; 0x1c0 <PWM_off>
 3f4:	08 95       	ret
			} else {
			myBool = true;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <myBool>
			PWM_on();
 3fc:	d6 ce       	rjmp	.-596    	; 0x1aa <PWM_on>
		}
		break;
	}
}
 3fe:	08 95       	ret

00000400 <main>:



int main(void)
{
	DDRA = 0x00; PINA = 0xFF;
 400:	11 b8       	out	0x01, r1	; 1
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	80 b9       	out	0x00, r24	; 0
	DDRB = 0xFF; PINB = 0x00; //lab said DDRB = xxxx 1xxx
 406:	84 b9       	out	0x04, r24	; 4
 408:	13 b8       	out	0x03, r1	; 3
	/* Replace with your application code */
	while (1)
	{
		tickFct();	//controls other functionality
 40a:	df de       	rcall	.-578    	; 0x1ca <tickFct>
		tickFct_2(); //controls on or off
 40c:	cf df       	rcall	.-98     	; 0x3ac <tickFct_2>
 40e:	fd cf       	rjmp	.-6      	; 0x40a <main+0xa>

00000410 <__cmpsf2>:
 410:	9c d0       	rcall	.+312    	; 0x54a <__fp_cmp>
 412:	08 f4       	brcc	.+2      	; 0x416 <__cmpsf2+0x6>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret

00000418 <__divsf3>:
 418:	0c d0       	rcall	.+24     	; 0x432 <__divsf3x>
 41a:	d2 c0       	rjmp	.+420    	; 0x5c0 <__fp_round>
 41c:	ca d0       	rcall	.+404    	; 0x5b2 <__fp_pscB>
 41e:	40 f0       	brcs	.+16     	; 0x430 <__divsf3+0x18>
 420:	c1 d0       	rcall	.+386    	; 0x5a4 <__fp_pscA>
 422:	30 f0       	brcs	.+12     	; 0x430 <__divsf3+0x18>
 424:	21 f4       	brne	.+8      	; 0x42e <__divsf3+0x16>
 426:	5f 3f       	cpi	r21, 0xFF	; 255
 428:	19 f0       	breq	.+6      	; 0x430 <__divsf3+0x18>
 42a:	b3 c0       	rjmp	.+358    	; 0x592 <__fp_inf>
 42c:	51 11       	cpse	r21, r1
 42e:	fc c0       	rjmp	.+504    	; 0x628 <__fp_szero>
 430:	b6 c0       	rjmp	.+364    	; 0x59e <__fp_nan>

00000432 <__divsf3x>:
 432:	d7 d0       	rcall	.+430    	; 0x5e2 <__fp_split3>
 434:	98 f3       	brcs	.-26     	; 0x41c <__divsf3+0x4>

00000436 <__divsf3_pse>:
 436:	99 23       	and	r25, r25
 438:	c9 f3       	breq	.-14     	; 0x42c <__divsf3+0x14>
 43a:	55 23       	and	r21, r21
 43c:	b1 f3       	breq	.-20     	; 0x42a <__divsf3+0x12>
 43e:	95 1b       	sub	r25, r21
 440:	55 0b       	sbc	r21, r21
 442:	bb 27       	eor	r27, r27
 444:	aa 27       	eor	r26, r26
 446:	62 17       	cp	r22, r18
 448:	73 07       	cpc	r23, r19
 44a:	84 07       	cpc	r24, r20
 44c:	38 f0       	brcs	.+14     	; 0x45c <__divsf3_pse+0x26>
 44e:	9f 5f       	subi	r25, 0xFF	; 255
 450:	5f 4f       	sbci	r21, 0xFF	; 255
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	44 1f       	adc	r20, r20
 458:	aa 1f       	adc	r26, r26
 45a:	a9 f3       	breq	.-22     	; 0x446 <__divsf3_pse+0x10>
 45c:	33 d0       	rcall	.+102    	; 0x4c4 <__divsf3_pse+0x8e>
 45e:	0e 2e       	mov	r0, r30
 460:	3a f0       	brmi	.+14     	; 0x470 <__divsf3_pse+0x3a>
 462:	e0 e8       	ldi	r30, 0x80	; 128
 464:	30 d0       	rcall	.+96     	; 0x4c6 <__divsf3_pse+0x90>
 466:	91 50       	subi	r25, 0x01	; 1
 468:	50 40       	sbci	r21, 0x00	; 0
 46a:	e6 95       	lsr	r30
 46c:	00 1c       	adc	r0, r0
 46e:	ca f7       	brpl	.-14     	; 0x462 <__divsf3_pse+0x2c>
 470:	29 d0       	rcall	.+82     	; 0x4c4 <__divsf3_pse+0x8e>
 472:	fe 2f       	mov	r31, r30
 474:	27 d0       	rcall	.+78     	; 0x4c4 <__divsf3_pse+0x8e>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	88 1f       	adc	r24, r24
 47c:	bb 1f       	adc	r27, r27
 47e:	26 17       	cp	r18, r22
 480:	37 07       	cpc	r19, r23
 482:	48 07       	cpc	r20, r24
 484:	ab 07       	cpc	r26, r27
 486:	b0 e8       	ldi	r27, 0x80	; 128
 488:	09 f0       	breq	.+2      	; 0x48c <__divsf3_pse+0x56>
 48a:	bb 0b       	sbc	r27, r27
 48c:	80 2d       	mov	r24, r0
 48e:	bf 01       	movw	r22, r30
 490:	ff 27       	eor	r31, r31
 492:	93 58       	subi	r25, 0x83	; 131
 494:	5f 4f       	sbci	r21, 0xFF	; 255
 496:	2a f0       	brmi	.+10     	; 0x4a2 <__divsf3_pse+0x6c>
 498:	9e 3f       	cpi	r25, 0xFE	; 254
 49a:	51 05       	cpc	r21, r1
 49c:	68 f0       	brcs	.+26     	; 0x4b8 <__divsf3_pse+0x82>
 49e:	79 c0       	rjmp	.+242    	; 0x592 <__fp_inf>
 4a0:	c3 c0       	rjmp	.+390    	; 0x628 <__fp_szero>
 4a2:	5f 3f       	cpi	r21, 0xFF	; 255
 4a4:	ec f3       	brlt	.-6      	; 0x4a0 <__divsf3_pse+0x6a>
 4a6:	98 3e       	cpi	r25, 0xE8	; 232
 4a8:	dc f3       	brlt	.-10     	; 0x4a0 <__divsf3_pse+0x6a>
 4aa:	86 95       	lsr	r24
 4ac:	77 95       	ror	r23
 4ae:	67 95       	ror	r22
 4b0:	b7 95       	ror	r27
 4b2:	f7 95       	ror	r31
 4b4:	9f 5f       	subi	r25, 0xFF	; 255
 4b6:	c9 f7       	brne	.-14     	; 0x4aa <__divsf3_pse+0x74>
 4b8:	88 0f       	add	r24, r24
 4ba:	91 1d       	adc	r25, r1
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	97 f9       	bld	r25, 7
 4c2:	08 95       	ret
 4c4:	e1 e0       	ldi	r30, 0x01	; 1
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	88 1f       	adc	r24, r24
 4cc:	bb 1f       	adc	r27, r27
 4ce:	62 17       	cp	r22, r18
 4d0:	73 07       	cpc	r23, r19
 4d2:	84 07       	cpc	r24, r20
 4d4:	ba 07       	cpc	r27, r26
 4d6:	20 f0       	brcs	.+8      	; 0x4e0 <__divsf3_pse+0xaa>
 4d8:	62 1b       	sub	r22, r18
 4da:	73 0b       	sbc	r23, r19
 4dc:	84 0b       	sbc	r24, r20
 4de:	ba 0b       	sbc	r27, r26
 4e0:	ee 1f       	adc	r30, r30
 4e2:	88 f7       	brcc	.-30     	; 0x4c6 <__divsf3_pse+0x90>
 4e4:	e0 95       	com	r30
 4e6:	08 95       	ret

000004e8 <__fixsfsi>:
 4e8:	04 d0       	rcall	.+8      	; 0x4f2 <__fixunssfsi>
 4ea:	68 94       	set
 4ec:	b1 11       	cpse	r27, r1
 4ee:	9c c0       	rjmp	.+312    	; 0x628 <__fp_szero>
 4f0:	08 95       	ret

000004f2 <__fixunssfsi>:
 4f2:	7f d0       	rcall	.+254    	; 0x5f2 <__fp_splitA>
 4f4:	88 f0       	brcs	.+34     	; 0x518 <__fixunssfsi+0x26>
 4f6:	9f 57       	subi	r25, 0x7F	; 127
 4f8:	90 f0       	brcs	.+36     	; 0x51e <__fixunssfsi+0x2c>
 4fa:	b9 2f       	mov	r27, r25
 4fc:	99 27       	eor	r25, r25
 4fe:	b7 51       	subi	r27, 0x17	; 23
 500:	a0 f0       	brcs	.+40     	; 0x52a <__fixunssfsi+0x38>
 502:	d1 f0       	breq	.+52     	; 0x538 <__fixunssfsi+0x46>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	1a f0       	brmi	.+6      	; 0x514 <__fixunssfsi+0x22>
 50e:	ba 95       	dec	r27
 510:	c9 f7       	brne	.-14     	; 0x504 <__fixunssfsi+0x12>
 512:	12 c0       	rjmp	.+36     	; 0x538 <__fixunssfsi+0x46>
 514:	b1 30       	cpi	r27, 0x01	; 1
 516:	81 f0       	breq	.+32     	; 0x538 <__fixunssfsi+0x46>
 518:	86 d0       	rcall	.+268    	; 0x626 <__fp_zero>
 51a:	b1 e0       	ldi	r27, 0x01	; 1
 51c:	08 95       	ret
 51e:	83 c0       	rjmp	.+262    	; 0x626 <__fp_zero>
 520:	67 2f       	mov	r22, r23
 522:	78 2f       	mov	r23, r24
 524:	88 27       	eor	r24, r24
 526:	b8 5f       	subi	r27, 0xF8	; 248
 528:	39 f0       	breq	.+14     	; 0x538 <__fixunssfsi+0x46>
 52a:	b9 3f       	cpi	r27, 0xF9	; 249
 52c:	cc f3       	brlt	.-14     	; 0x520 <__fixunssfsi+0x2e>
 52e:	86 95       	lsr	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b3 95       	inc	r27
 536:	d9 f7       	brne	.-10     	; 0x52e <__fixunssfsi+0x3c>
 538:	3e f4       	brtc	.+14     	; 0x548 <__fixunssfsi+0x56>
 53a:	90 95       	com	r25
 53c:	80 95       	com	r24
 53e:	70 95       	com	r23
 540:	61 95       	neg	r22
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__fp_cmp>:
 54a:	99 0f       	add	r25, r25
 54c:	00 08       	sbc	r0, r0
 54e:	55 0f       	add	r21, r21
 550:	aa 0b       	sbc	r26, r26
 552:	e0 e8       	ldi	r30, 0x80	; 128
 554:	fe ef       	ldi	r31, 0xFE	; 254
 556:	16 16       	cp	r1, r22
 558:	17 06       	cpc	r1, r23
 55a:	e8 07       	cpc	r30, r24
 55c:	f9 07       	cpc	r31, r25
 55e:	c0 f0       	brcs	.+48     	; 0x590 <__fp_cmp+0x46>
 560:	12 16       	cp	r1, r18
 562:	13 06       	cpc	r1, r19
 564:	e4 07       	cpc	r30, r20
 566:	f5 07       	cpc	r31, r21
 568:	98 f0       	brcs	.+38     	; 0x590 <__fp_cmp+0x46>
 56a:	62 1b       	sub	r22, r18
 56c:	73 0b       	sbc	r23, r19
 56e:	84 0b       	sbc	r24, r20
 570:	95 0b       	sbc	r25, r21
 572:	39 f4       	brne	.+14     	; 0x582 <__fp_cmp+0x38>
 574:	0a 26       	eor	r0, r26
 576:	61 f0       	breq	.+24     	; 0x590 <__fp_cmp+0x46>
 578:	23 2b       	or	r18, r19
 57a:	24 2b       	or	r18, r20
 57c:	25 2b       	or	r18, r21
 57e:	21 f4       	brne	.+8      	; 0x588 <__fp_cmp+0x3e>
 580:	08 95       	ret
 582:	0a 26       	eor	r0, r26
 584:	09 f4       	brne	.+2      	; 0x588 <__fp_cmp+0x3e>
 586:	a1 40       	sbci	r26, 0x01	; 1
 588:	a6 95       	lsr	r26
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	81 1d       	adc	r24, r1
 58e:	81 1d       	adc	r24, r1
 590:	08 95       	ret

00000592 <__fp_inf>:
 592:	97 f9       	bld	r25, 7
 594:	9f 67       	ori	r25, 0x7F	; 127
 596:	80 e8       	ldi	r24, 0x80	; 128
 598:	70 e0       	ldi	r23, 0x00	; 0
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	08 95       	ret

0000059e <__fp_nan>:
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	80 ec       	ldi	r24, 0xC0	; 192
 5a2:	08 95       	ret

000005a4 <__fp_pscA>:
 5a4:	00 24       	eor	r0, r0
 5a6:	0a 94       	dec	r0
 5a8:	16 16       	cp	r1, r22
 5aa:	17 06       	cpc	r1, r23
 5ac:	18 06       	cpc	r1, r24
 5ae:	09 06       	cpc	r0, r25
 5b0:	08 95       	ret

000005b2 <__fp_pscB>:
 5b2:	00 24       	eor	r0, r0
 5b4:	0a 94       	dec	r0
 5b6:	12 16       	cp	r1, r18
 5b8:	13 06       	cpc	r1, r19
 5ba:	14 06       	cpc	r1, r20
 5bc:	05 06       	cpc	r0, r21
 5be:	08 95       	ret

000005c0 <__fp_round>:
 5c0:	09 2e       	mov	r0, r25
 5c2:	03 94       	inc	r0
 5c4:	00 0c       	add	r0, r0
 5c6:	11 f4       	brne	.+4      	; 0x5cc <__fp_round+0xc>
 5c8:	88 23       	and	r24, r24
 5ca:	52 f0       	brmi	.+20     	; 0x5e0 <__fp_round+0x20>
 5cc:	bb 0f       	add	r27, r27
 5ce:	40 f4       	brcc	.+16     	; 0x5e0 <__fp_round+0x20>
 5d0:	bf 2b       	or	r27, r31
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <__fp_round+0x18>
 5d4:	60 ff       	sbrs	r22, 0
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__fp_round+0x20>
 5d8:	6f 5f       	subi	r22, 0xFF	; 255
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__fp_split3>:
 5e2:	57 fd       	sbrc	r21, 7
 5e4:	90 58       	subi	r25, 0x80	; 128
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	59 f0       	breq	.+22     	; 0x602 <__fp_splitA+0x10>
 5ec:	5f 3f       	cpi	r21, 0xFF	; 255
 5ee:	71 f0       	breq	.+28     	; 0x60c <__fp_splitA+0x1a>
 5f0:	47 95       	ror	r20

000005f2 <__fp_splitA>:
 5f2:	88 0f       	add	r24, r24
 5f4:	97 fb       	bst	r25, 7
 5f6:	99 1f       	adc	r25, r25
 5f8:	61 f0       	breq	.+24     	; 0x612 <__fp_splitA+0x20>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	79 f0       	breq	.+30     	; 0x61c <__fp_splitA+0x2a>
 5fe:	87 95       	ror	r24
 600:	08 95       	ret
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	14 06       	cpc	r1, r20
 608:	55 1f       	adc	r21, r21
 60a:	f2 cf       	rjmp	.-28     	; 0x5f0 <__fp_split3+0xe>
 60c:	46 95       	lsr	r20
 60e:	f1 df       	rcall	.-30     	; 0x5f2 <__fp_splitA>
 610:	08 c0       	rjmp	.+16     	; 0x622 <__fp_splitA+0x30>
 612:	16 16       	cp	r1, r22
 614:	17 06       	cpc	r1, r23
 616:	18 06       	cpc	r1, r24
 618:	99 1f       	adc	r25, r25
 61a:	f1 cf       	rjmp	.-30     	; 0x5fe <__fp_splitA+0xc>
 61c:	86 95       	lsr	r24
 61e:	71 05       	cpc	r23, r1
 620:	61 05       	cpc	r22, r1
 622:	08 94       	sec
 624:	08 95       	ret

00000626 <__fp_zero>:
 626:	e8 94       	clt

00000628 <__fp_szero>:
 628:	bb 27       	eor	r27, r27
 62a:	66 27       	eor	r22, r22
 62c:	77 27       	eor	r23, r23
 62e:	cb 01       	movw	r24, r22
 630:	97 f9       	bld	r25, 7
 632:	08 95       	ret

00000634 <__gesf2>:
 634:	8a df       	rcall	.-236    	; 0x54a <__fp_cmp>
 636:	08 f4       	brcc	.+2      	; 0x63a <__gesf2+0x6>
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__mulsf3>:
 63c:	0b d0       	rcall	.+22     	; 0x654 <__mulsf3x>
 63e:	c0 cf       	rjmp	.-128    	; 0x5c0 <__fp_round>
 640:	b1 df       	rcall	.-158    	; 0x5a4 <__fp_pscA>
 642:	28 f0       	brcs	.+10     	; 0x64e <__mulsf3+0x12>
 644:	b6 df       	rcall	.-148    	; 0x5b2 <__fp_pscB>
 646:	18 f0       	brcs	.+6      	; 0x64e <__mulsf3+0x12>
 648:	95 23       	and	r25, r21
 64a:	09 f0       	breq	.+2      	; 0x64e <__mulsf3+0x12>
 64c:	a2 cf       	rjmp	.-188    	; 0x592 <__fp_inf>
 64e:	a7 cf       	rjmp	.-178    	; 0x59e <__fp_nan>
 650:	11 24       	eor	r1, r1
 652:	ea cf       	rjmp	.-44     	; 0x628 <__fp_szero>

00000654 <__mulsf3x>:
 654:	c6 df       	rcall	.-116    	; 0x5e2 <__fp_split3>
 656:	a0 f3       	brcs	.-24     	; 0x640 <__mulsf3+0x4>

00000658 <__mulsf3_pse>:
 658:	95 9f       	mul	r25, r21
 65a:	d1 f3       	breq	.-12     	; 0x650 <__mulsf3+0x14>
 65c:	95 0f       	add	r25, r21
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	55 1f       	adc	r21, r21
 662:	62 9f       	mul	r22, r18
 664:	f0 01       	movw	r30, r0
 666:	72 9f       	mul	r23, r18
 668:	bb 27       	eor	r27, r27
 66a:	f0 0d       	add	r31, r0
 66c:	b1 1d       	adc	r27, r1
 66e:	63 9f       	mul	r22, r19
 670:	aa 27       	eor	r26, r26
 672:	f0 0d       	add	r31, r0
 674:	b1 1d       	adc	r27, r1
 676:	aa 1f       	adc	r26, r26
 678:	64 9f       	mul	r22, r20
 67a:	66 27       	eor	r22, r22
 67c:	b0 0d       	add	r27, r0
 67e:	a1 1d       	adc	r26, r1
 680:	66 1f       	adc	r22, r22
 682:	82 9f       	mul	r24, r18
 684:	22 27       	eor	r18, r18
 686:	b0 0d       	add	r27, r0
 688:	a1 1d       	adc	r26, r1
 68a:	62 1f       	adc	r22, r18
 68c:	73 9f       	mul	r23, r19
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	62 1f       	adc	r22, r18
 694:	83 9f       	mul	r24, r19
 696:	a0 0d       	add	r26, r0
 698:	61 1d       	adc	r22, r1
 69a:	22 1f       	adc	r18, r18
 69c:	74 9f       	mul	r23, r20
 69e:	33 27       	eor	r19, r19
 6a0:	a0 0d       	add	r26, r0
 6a2:	61 1d       	adc	r22, r1
 6a4:	23 1f       	adc	r18, r19
 6a6:	84 9f       	mul	r24, r20
 6a8:	60 0d       	add	r22, r0
 6aa:	21 1d       	adc	r18, r1
 6ac:	82 2f       	mov	r24, r18
 6ae:	76 2f       	mov	r23, r22
 6b0:	6a 2f       	mov	r22, r26
 6b2:	11 24       	eor	r1, r1
 6b4:	9f 57       	subi	r25, 0x7F	; 127
 6b6:	50 40       	sbci	r21, 0x00	; 0
 6b8:	8a f0       	brmi	.+34     	; 0x6dc <__mulsf3_pse+0x84>
 6ba:	e1 f0       	breq	.+56     	; 0x6f4 <__mulsf3_pse+0x9c>
 6bc:	88 23       	and	r24, r24
 6be:	4a f0       	brmi	.+18     	; 0x6d2 <__mulsf3_pse+0x7a>
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	bb 1f       	adc	r27, r27
 6c6:	66 1f       	adc	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	91 50       	subi	r25, 0x01	; 1
 6ce:	50 40       	sbci	r21, 0x00	; 0
 6d0:	a9 f7       	brne	.-22     	; 0x6bc <__mulsf3_pse+0x64>
 6d2:	9e 3f       	cpi	r25, 0xFE	; 254
 6d4:	51 05       	cpc	r21, r1
 6d6:	70 f0       	brcs	.+28     	; 0x6f4 <__mulsf3_pse+0x9c>
 6d8:	5c cf       	rjmp	.-328    	; 0x592 <__fp_inf>
 6da:	a6 cf       	rjmp	.-180    	; 0x628 <__fp_szero>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	ec f3       	brlt	.-6      	; 0x6da <__mulsf3_pse+0x82>
 6e0:	98 3e       	cpi	r25, 0xE8	; 232
 6e2:	dc f3       	brlt	.-10     	; 0x6da <__mulsf3_pse+0x82>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f7 95       	ror	r31
 6ee:	e7 95       	ror	r30
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	c1 f7       	brne	.-16     	; 0x6e4 <__mulsf3_pse+0x8c>
 6f4:	fe 2b       	or	r31, r30
 6f6:	88 0f       	add	r24, r24
 6f8:	91 1d       	adc	r25, r1
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__tablejump2__>:
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	00 24       	eor	r0, r0
 708:	00 1c       	adc	r0, r0
 70a:	0b be       	out	0x3b, r0	; 59
 70c:	07 90       	elpm	r0, Z+
 70e:	f6 91       	elpm	r31, Z
 710:	e0 2d       	mov	r30, r0
 712:	09 94       	ijmp

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
