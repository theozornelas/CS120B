
omore005_Lab11_Part1.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000051c  000005b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  0080010c  0080010c  000005bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc3  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000996  00000000  00000000  0000146f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055e  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060b  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000694  00000000  00000000  00002a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000312b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e7 c0       	rjmp	.+462    	; 0x204 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 34       	cpi	r26, 0x40	; 64
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	dc d0       	rcall	.+440    	; 0x27c <main>
  c4:	29 c2       	rjmp	.+1106   	; 0x518 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick1>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	20 b1       	in	r18, 0x00	; 0
  ca:	21 70       	andi	r18, 0x01	; 1
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	b9 f0       	breq	.+46     	; 0x100 <SMTick1+0x38>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	91 05       	cpc	r25, r1
  d6:	29 f0       	breq	.+10     	; 0xe2 <SMTick1+0x1a>
  d8:	00 97       	sbiw	r24, 0x00	; 0
  da:	a9 f4       	brne	.+42     	; 0x106 <SMTick1+0x3e>
  dc:	22 23       	and	r18, r18
  de:	31 f0       	breq	.+12     	; 0xec <SMTick1+0x24>
  e0:	08 95       	ret
  e2:	22 23       	and	r18, r18
  e4:	91 f0       	breq	.+36     	; 0x10a <SMTick1+0x42>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <pause>
  f2:	91 11       	cpse	r25, r1
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <pause>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	08 95       	ret
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	08 95       	ret

0000010c <SMTick2>:
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	19 f0       	breq	.+6      	; 0x116 <SMTick2+0xa>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	31 f0       	breq	.+12     	; 0x120 <SMTick2+0x14>
 114:	13 c0       	rjmp	.+38     	; 0x13c <SMTick2+0x30>
 116:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <pause>
 11a:	22 23       	and	r18, r18
 11c:	29 f0       	breq	.+10     	; 0x128 <SMTick2+0x1c>
 11e:	08 95       	ret
 120:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pause>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	69 f0       	breq	.+26     	; 0x142 <SMTick2+0x36>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <SM2_output>
 12e:	91 11       	cpse	r25, r1
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <SM2_output>
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	08 95       	ret

00000148 <SMTick3>:
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	19 f0       	breq	.+6      	; 0x152 <SMTick3+0xa>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	31 f0       	breq	.+12     	; 0x15c <SMTick3+0x14>
 150:	15 c0       	rjmp	.+42     	; 0x17c <SMTick3+0x34>
 152:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <pause>
 156:	22 23       	and	r18, r18
 158:	29 f0       	breq	.+10     	; 0x164 <SMTick3+0x1c>
 15a:	08 95       	ret
 15c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <pause>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	79 f0       	breq	.+30     	; 0x182 <SMTick3+0x3a>
 164:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SM3_output>
 168:	88 23       	and	r24, r24
 16a:	11 f0       	breq	.+4      	; 0x170 <SMTick3+0x28>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	01 c0       	rjmp	.+2      	; 0x172 <SMTick3+0x2a>
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <SM3_output>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

00000188 <SMTick4>:
 188:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <SM2_output>
 18c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <SM3_output>
 190:	89 2b       	or	r24, r25
 192:	8b b9       	out	0x0b, r24	; 11
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret

0000019a <TimerSet>:
 19a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 19e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1aa:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <_avr_timer_cntcurr>
 1ae:	70 93 3c 01 	sts	0x013C, r23	; 0x80013c <_avr_timer_cntcurr+0x1>
 1b2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr+0x2>
 1b6:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x3>
 1ba:	08 95       	ret

000001bc <TimerOn>:
 1bc:	8b e0       	ldi	r24, 0x0B	; 11
 1be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1c2:	8d e7       	ldi	r24, 0x7D	; 125
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1e4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1e8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ec:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_avr_timer_cntcurr>
 1f0:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_avr_timer_cntcurr+0x1>
 1f4:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <_avr_timer_cntcurr+0x2>
 1f8:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <_avr_timer_cntcurr+0x3>
 1fc:	8f b7       	in	r24, 0x3f	; 63
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	8f bf       	out	0x3f, r24	; 63
 202:	08 95       	ret

00000204 <__vector_13>:
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <_avr_timer_cntcurr>
 21a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <_avr_timer_cntcurr+0x1>
 21e:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <_avr_timer_cntcurr+0x2>
 222:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x3>
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	a1 09       	sbc	r26, r1
 22a:	b1 09       	sbc	r27, r1
 22c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_avr_timer_cntcurr>
 230:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_avr_timer_cntcurr+0x1>
 234:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <_avr_timer_cntcurr+0x2>
 238:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <_avr_timer_cntcurr+0x3>
 23c:	89 2b       	or	r24, r25
 23e:	8a 2b       	or	r24, r26
 240:	8b 2b       	or	r24, r27
 242:	99 f4       	brne	.+38     	; 0x26a <__vector_13+0x66>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <TimerFlag>
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 252:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 256:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 25a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <_avr_timer_cntcurr>
 25e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <_avr_timer_cntcurr+0x1>
 262:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <_avr_timer_cntcurr+0x2>
 266:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <_avr_timer_cntcurr+0x3>
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <main>:
	return state;
}
// --------END User defined FSMs-----------------------------------------------
// Implement scheduler code from PES.
int main()
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2c 97       	sbiw	r28, 0x0c	; 12
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0x00; PORTA = 0xFF;
 290:	11 b8       	out	0x01, r1	; 1
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00;
 296:	8a b9       	out	0x0a, r24	; 10
 298:	1b b8       	out	0x0b, r1	; 11
 29a:	14 ef       	ldi	r17, 0xF4	; 244
 29c:	01 e0       	ldi	r16, 0x01	; 1
 29e:	f1 2c       	mov	r15, r1
 2a0:	e1 2c       	mov	r14, r1
 2a2:	52 e3       	ldi	r21, 0x32	; 50
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <main+0x38>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 2ac:	16 2f       	mov	r17, r22
 2ae:	07 2f       	mov	r16, r23
 2b0:	f8 2e       	mov	r15, r24
 2b2:	e9 2e       	mov	r14, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 2b4:	65 2f       	mov	r22, r21
 2b6:	74 2f       	mov	r23, r20
 2b8:	83 2f       	mov	r24, r19
 2ba:	92 2f       	mov	r25, r18
 2bc:	21 2f       	mov	r18, r17
 2be:	30 2f       	mov	r19, r16
 2c0:	4f 2d       	mov	r20, r15
 2c2:	5e 2d       	mov	r21, r14
 2c4:	07 d1       	rcall	.+526    	; 0x4d4 <__udivmodsi4>
 2c6:	51 2f       	mov	r21, r17
 2c8:	40 2f       	mov	r20, r16
 2ca:	3f 2d       	mov	r19, r15
 2cc:	2e 2d       	mov	r18, r14
		if(c==0){return b;}
 2ce:	61 15       	cp	r22, r1
 2d0:	71 05       	cpc	r23, r1
 2d2:	81 05       	cpc	r24, r1
 2d4:	91 05       	cpc	r25, r1
 2d6:	51 f7       	brne	.-44     	; 0x2ac <main+0x30>
 2d8:	0f 2e       	mov	r0, r31
 2da:	f8 ee       	ldi	r31, 0xE8	; 232
 2dc:	bf 2e       	mov	r11, r31
 2de:	f0 2d       	mov	r31, r0
 2e0:	0f 2e       	mov	r0, r31
 2e2:	f3 e0       	ldi	r31, 0x03	; 3
 2e4:	af 2e       	mov	r10, r31
 2e6:	f0 2d       	mov	r31, r0
 2e8:	91 2c       	mov	r9, r1
 2ea:	81 2c       	mov	r8, r1
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <main+0x7a>
		a = b;
		b = c;
 2ee:	b6 2e       	mov	r11, r22
 2f0:	a7 2e       	mov	r10, r23
 2f2:	98 2e       	mov	r9, r24
 2f4:	89 2e       	mov	r8, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 2f6:	61 2f       	mov	r22, r17
 2f8:	70 2f       	mov	r23, r16
 2fa:	8f 2d       	mov	r24, r15
 2fc:	9e 2d       	mov	r25, r14
 2fe:	2b 2d       	mov	r18, r11
 300:	3a 2d       	mov	r19, r10
 302:	49 2d       	mov	r20, r9
 304:	58 2d       	mov	r21, r8
 306:	e6 d0       	rcall	.+460    	; 0x4d4 <__udivmodsi4>
 308:	1b 2d       	mov	r17, r11
 30a:	0a 2d       	mov	r16, r10
 30c:	f9 2c       	mov	r15, r9
 30e:	e8 2c       	mov	r14, r8
		if(c==0){return b;}
 310:	61 15       	cp	r22, r1
 312:	71 05       	cpc	r23, r1
 314:	81 05       	cpc	r24, r1
 316:	91 05       	cpc	r25, r1
 318:	51 f7       	brne	.-44     	; 0x2ee <main+0x72>
 31a:	0f 2e       	mov	r0, r31
 31c:	fa e0       	ldi	r31, 0x0A	; 10
 31e:	ef 2e       	mov	r14, r31
 320:	f0 2d       	mov	r31, r0
 322:	f1 2c       	mov	r15, r1
 324:	00 e0       	ldi	r16, 0x00	; 0
 326:	10 e0       	ldi	r17, 0x00	; 0
 328:	04 c0       	rjmp	.+8      	; 0x332 <main+0xb6>
		a = b;
		b = c;
 32a:	e6 2e       	mov	r14, r22
 32c:	f7 2e       	mov	r15, r23
 32e:	08 2f       	mov	r16, r24
 330:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 332:	6b 2d       	mov	r22, r11
 334:	7a 2d       	mov	r23, r10
 336:	89 2d       	mov	r24, r9
 338:	98 2d       	mov	r25, r8
 33a:	2e 2d       	mov	r18, r14
 33c:	3f 2d       	mov	r19, r15
 33e:	40 2f       	mov	r20, r16
 340:	51 2f       	mov	r21, r17
 342:	c8 d0       	rcall	.+400    	; 0x4d4 <__udivmodsi4>
 344:	be 2c       	mov	r11, r14
 346:	af 2c       	mov	r10, r15
 348:	90 2e       	mov	r9, r16
 34a:	81 2e       	mov	r8, r17
		if(c==0){return b;}
 34c:	61 15       	cp	r22, r1
 34e:	71 05       	cpc	r23, r1
 350:	81 05       	cpc	r24, r1
 352:	91 05       	cpc	r25, r1
 354:	51 f7       	brne	.-44     	; 0x32a <main+0xae>
	tmpGCD = findGCD(tmpGCD, SMTick3_calc);
	tmpGCD = findGCD(tmpGCD, SMTick4_calc);
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/GCD;
 356:	62 e3       	ldi	r22, 0x32	; 50
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	2e 2d       	mov	r18, r14
 360:	3f 2d       	mov	r19, r15
 362:	40 2f       	mov	r20, r16
 364:	51 2f       	mov	r21, r17
 366:	b6 d0       	rcall	.+364    	; 0x4d4 <__udivmodsi4>
 368:	29 87       	std	Y+9, r18	; 0x09
 36a:	3a 87       	std	Y+10, r19	; 0x0a
 36c:	4b 87       	std	Y+11, r20	; 0x0b
 36e:	5c 87       	std	Y+12, r21	; 0x0c
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
 370:	64 ef       	ldi	r22, 0xF4	; 244
 372:	71 e0       	ldi	r23, 0x01	; 1
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	2e 2d       	mov	r18, r14
 37a:	3f 2d       	mov	r19, r15
 37c:	40 2f       	mov	r20, r16
 37e:	51 2f       	mov	r21, r17
 380:	a9 d0       	rcall	.+338    	; 0x4d4 <__udivmodsi4>
 382:	29 01       	movw	r4, r18
 384:	3a 01       	movw	r6, r20
	unsigned long int SMTick3_period = SMTick3_calc/GCD;
 386:	68 ee       	ldi	r22, 0xE8	; 232
 388:	73 e0       	ldi	r23, 0x03	; 3
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	2e 2d       	mov	r18, r14
 390:	3f 2d       	mov	r19, r15
 392:	40 2f       	mov	r20, r16
 394:	51 2f       	mov	r21, r17
 396:	9e d0       	rcall	.+316    	; 0x4d4 <__udivmodsi4>
 398:	49 01       	movw	r8, r18
 39a:	5a 01       	movw	r10, r20
	unsigned long int SMTick4_period = SMTick4_calc/GCD;
 39c:	6a e0       	ldi	r22, 0x0A	; 10
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	2e 2d       	mov	r18, r14
 3a6:	3f 2d       	mov	r19, r15
 3a8:	40 2f       	mov	r20, r16
 3aa:	51 2f       	mov	r21, r17
 3ac:	93 d0       	rcall	.+294    	; 0x4d4 <__udivmodsi4>
	//Declare an array of tasks
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2, &task3, &task4 };
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	e4 e0       	ldi	r30, 0x04	; 4
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	de 01       	movw	r26, r28
 3b6:	11 96       	adiw	r26, 0x01	; 1
 3b8:	01 90       	ld	r0, Z+
 3ba:	0d 92       	st	X+, r0
 3bc:	8a 95       	dec	r24
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x13c>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	// Task 1
	task1.state = -1;//Task initial state.
 3c0:	ed e2       	ldi	r30, 0x2D	; 45
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	6f ef       	ldi	r22, 0xFF	; 255
 3c6:	60 83       	st	Z, r22
	task1.period = SMTick1_period;//Task Period.
 3c8:	89 85       	ldd	r24, Y+9	; 0x09
 3ca:	9a 85       	ldd	r25, Y+10	; 0x0a
 3cc:	ab 85       	ldd	r26, Y+11	; 0x0b
 3ce:	bc 85       	ldd	r27, Y+12	; 0x0c
 3d0:	81 83       	std	Z+1, r24	; 0x01
 3d2:	92 83       	std	Z+2, r25	; 0x02
 3d4:	a3 83       	std	Z+3, r26	; 0x03
 3d6:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3d8:	85 83       	std	Z+5, r24	; 0x05
 3da:	96 83       	std	Z+6, r25	; 0x06
 3dc:	a7 83       	std	Z+7, r26	; 0x07
 3de:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 3e0:	84 e6       	ldi	r24, 0x64	; 100
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	92 87       	std	Z+10, r25	; 0x0a
 3e6:	81 87       	std	Z+9, r24	; 0x09
	// Task 2
	task2.state = -1;//Task initial state.
 3e8:	e2 e2       	ldi	r30, 0x22	; 34
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	60 83       	st	Z, r22
	task2.period = SMTick2_period;//Task Period.
 3ee:	41 82       	std	Z+1, r4	; 0x01
 3f0:	52 82       	std	Z+2, r5	; 0x02
 3f2:	63 82       	std	Z+3, r6	; 0x03
 3f4:	74 82       	std	Z+4, r7	; 0x04
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 3f6:	45 82       	std	Z+5, r4	; 0x05
 3f8:	56 82       	std	Z+6, r5	; 0x06
 3fa:	67 82       	std	Z+7, r6	; 0x07
 3fc:	70 86       	std	Z+8, r7	; 0x08
	task2.TickFct = &SMTick2;//Function pointer for the tick.
 3fe:	86 e8       	ldi	r24, 0x86	; 134
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	92 87       	std	Z+10, r25	; 0x0a
 404:	81 87       	std	Z+9, r24	; 0x09
	// Task 3
	task3.state = -1;//Task initial state.
 406:	e7 e1       	ldi	r30, 0x17	; 23
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	60 83       	st	Z, r22
	task3.period = SMTick3_period;//Task Period.
 40c:	81 82       	std	Z+1, r8	; 0x01
 40e:	92 82       	std	Z+2, r9	; 0x02
 410:	a3 82       	std	Z+3, r10	; 0x03
 412:	b4 82       	std	Z+4, r11	; 0x04
	task3.elapsedTime = SMTick3_period; // Task current elasped time.
 414:	85 82       	std	Z+5, r8	; 0x05
 416:	96 82       	std	Z+6, r9	; 0x06
 418:	a7 82       	std	Z+7, r10	; 0x07
 41a:	b0 86       	std	Z+8, r11	; 0x08
	task3.TickFct = &SMTick3; // Function pointer for the tick.
 41c:	84 ea       	ldi	r24, 0xA4	; 164
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	92 87       	std	Z+10, r25	; 0x0a
 422:	81 87       	std	Z+9, r24	; 0x09
	// Task 4
	task4.state = -1;//Task initial state.
 424:	ec e0       	ldi	r30, 0x0C	; 12
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	60 83       	st	Z, r22
	task4.period = SMTick4_period;//Task Period.
 42a:	21 83       	std	Z+1, r18	; 0x01
 42c:	32 83       	std	Z+2, r19	; 0x02
 42e:	43 83       	std	Z+3, r20	; 0x03
 430:	54 83       	std	Z+4, r21	; 0x04
	task4.elapsedTime = SMTick4_period; // Task current elasped time.
 432:	25 83       	std	Z+5, r18	; 0x05
 434:	36 83       	std	Z+6, r19	; 0x06
 436:	47 83       	std	Z+7, r20	; 0x07
 438:	50 87       	std	Z+8, r21	; 0x08
	task4.TickFct = &SMTick4; // Function pointer for the tick.
 43a:	84 ec       	ldi	r24, 0xC4	; 196
 43c:	90 e0       	ldi	r25, 0x00	; 0
	// Set the timer and turn it on
	TimerSet(GCD);
 43e:	92 87       	std	Z+10, r25	; 0x0a
 440:	81 87       	std	Z+9, r24	; 0x09
 442:	6e 2d       	mov	r22, r14
 444:	7f 2d       	mov	r23, r15
 446:	80 2f       	mov	r24, r16
 448:	91 2f       	mov	r25, r17
	TimerOn();
 44a:	a7 de       	rcall	.-690    	; 0x19a <TimerSet>
 44c:	b7 de       	rcall	.-658    	; 0x1bc <TimerOn>
 44e:	7e 01       	movw	r14, r28
 450:	99 e0       	ldi	r25, 0x09	; 9
 452:	e9 0e       	add	r14, r25
 454:	f1 1c       	adc	r15, r1
 456:	de 01       	movw	r26, r28
 458:	11 96       	adiw	r26, 0x01	; 1
 45a:	5d 01       	movw	r10, r26
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 45c:	f5 01       	movw	r30, r10
 45e:	01 91       	ld	r16, Z+
 460:	11 91       	ld	r17, Z+
 462:	5f 01       	movw	r10, r30
 464:	d8 01       	movw	r26, r16
 466:	15 96       	adiw	r26, 0x05	; 5
 468:	4d 91       	ld	r20, X+
 46a:	5d 91       	ld	r21, X+
 46c:	6d 91       	ld	r22, X+
 46e:	7c 91       	ld	r23, X
 470:	18 97       	sbiw	r26, 0x08	; 8
 472:	11 96       	adiw	r26, 0x01	; 1
 474:	8d 91       	ld	r24, X+
 476:	9d 91       	ld	r25, X+
 478:	0d 90       	ld	r0, X+
 47a:	bc 91       	ld	r27, X
 47c:	a0 2d       	mov	r26, r0
 47e:	48 17       	cp	r20, r24
 480:	59 07       	cpc	r21, r25
 482:	6a 07       	cpc	r22, r26
 484:	7b 07       	cpc	r23, r27
 486:	81 f4       	brne	.+32     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 488:	f8 01       	movw	r30, r16
 48a:	80 81       	ld	r24, Z
 48c:	01 84       	ldd	r0, Z+9	; 0x09
 48e:	f2 85       	ldd	r31, Z+10	; 0x0a
 490:	e0 2d       	mov	r30, r0
 492:	08 2e       	mov	r0, r24
 494:	00 0c       	add	r0, r0
 496:	99 0b       	sbc	r25, r25
 498:	09 95       	icall
 49a:	d8 01       	movw	r26, r16
 49c:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 49e:	f8 01       	movw	r30, r16
 4a0:	15 82       	std	Z+5, r1	; 0x05
 4a2:	16 82       	std	Z+6, r1	; 0x06
 4a4:	17 82       	std	Z+7, r1	; 0x07
 4a6:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 4a8:	f8 01       	movw	r30, r16
 4aa:	85 81       	ldd	r24, Z+5	; 0x05
 4ac:	96 81       	ldd	r25, Z+6	; 0x06
 4ae:	a7 81       	ldd	r26, Z+7	; 0x07
 4b0:	b0 85       	ldd	r27, Z+8	; 0x08
 4b2:	01 96       	adiw	r24, 0x01	; 1
 4b4:	a1 1d       	adc	r26, r1
 4b6:	b1 1d       	adc	r27, r1
 4b8:	85 83       	std	Z+5, r24	; 0x05
 4ba:	96 83       	std	Z+6, r25	; 0x06
 4bc:	a7 83       	std	Z+7, r26	; 0x07
 4be:	b0 87       	std	Z+8, r27	; 0x08
	TimerSet(GCD);
	TimerOn();
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 4c0:	ae 14       	cp	r10, r14
 4c2:	bf 04       	cpc	r11, r15
 4c4:	59 f6       	brne	.-106    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 4c6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <TimerFlag>
 4ca:	88 23       	and	r24, r24
 4cc:	e1 f3       	breq	.-8      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		TimerFlag = 0;
 4ce:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <TimerFlag>
	}
 4d2:	c1 cf       	rjmp	.-126    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>

000004d4 <__udivmodsi4>:
 4d4:	a1 e2       	ldi	r26, 0x21	; 33
 4d6:	1a 2e       	mov	r1, r26
 4d8:	aa 1b       	sub	r26, r26
 4da:	bb 1b       	sub	r27, r27
 4dc:	fd 01       	movw	r30, r26
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <__udivmodsi4_ep>

000004e0 <__udivmodsi4_loop>:
 4e0:	aa 1f       	adc	r26, r26
 4e2:	bb 1f       	adc	r27, r27
 4e4:	ee 1f       	adc	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	a2 17       	cp	r26, r18
 4ea:	b3 07       	cpc	r27, r19
 4ec:	e4 07       	cpc	r30, r20
 4ee:	f5 07       	cpc	r31, r21
 4f0:	20 f0       	brcs	.+8      	; 0x4fa <__udivmodsi4_ep>
 4f2:	a2 1b       	sub	r26, r18
 4f4:	b3 0b       	sbc	r27, r19
 4f6:	e4 0b       	sbc	r30, r20
 4f8:	f5 0b       	sbc	r31, r21

000004fa <__udivmodsi4_ep>:
 4fa:	66 1f       	adc	r22, r22
 4fc:	77 1f       	adc	r23, r23
 4fe:	88 1f       	adc	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	1a 94       	dec	r1
 504:	69 f7       	brne	.-38     	; 0x4e0 <__udivmodsi4_loop>
 506:	60 95       	com	r22
 508:	70 95       	com	r23
 50a:	80 95       	com	r24
 50c:	90 95       	com	r25
 50e:	9b 01       	movw	r18, r22
 510:	ac 01       	movw	r20, r24
 512:	bd 01       	movw	r22, r26
 514:	cf 01       	movw	r24, r30
 516:	08 95       	ret

00000518 <_exit>:
 518:	f8 94       	cli

0000051a <__stop_program>:
 51a:	ff cf       	rjmp	.-2      	; 0x51a <__stop_program>
